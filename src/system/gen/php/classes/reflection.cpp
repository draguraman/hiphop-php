/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010- Facebook, Inc. (http://www.facebook.com)         |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/
// @generated by HipHop Compiler

#include <runtime/base/hphp_system.h>
#include <system/gen/sys/literal_strings_remap.h>
#include <system/gen/sys/scalar_arrays_remap.h>
#include <php/classes/reflection.fws.h>
#include <php/classes/reflection.h>

// Dependencies
#include <php/classes/exception.h>
#include <php/classes/stdclass.h>
#include <runtime/ext/ext.h>
#include <runtime/eval/eval.h>
namespace hphp_impl_starter {}

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

/* preface starts */
extern CallInfo ci_;
/* preface finishes */
/* SRC: classes/reflection.php line 46 */
IMPLEMENT_CLASS_NO_DEFAULT_SWEEP(ReflectionParameter)
const InstanceOfInfo c_ReflectionParameter::s_instanceof_table[] = {
  {0x62F7F85447C0A605LL,1,"Reflector",(const ObjectStaticCallbacks*)2},
  {0x2E7081C468A05993LL,1,"ReflectionParameter",&cw_ReflectionParameter},
};
const int c_ReflectionParameter::s_instanceof_index[] = {
  3,
  -1,0,-1,1,
};
CallInfo c_ReflectionParameter::ci___tostring((void*)&c_ReflectionParameter::i___tostring, (void*)&c_ReflectionParameter::ifa___tostring, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_ispassedbyreference((void*)&c_ReflectionParameter::i_ispassedbyreference, (void*)&c_ReflectionParameter::ifa_ispassedbyreference, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_isarray((void*)&c_ReflectionParameter::i_isarray, (void*)&c_ReflectionParameter::ifa_isarray, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_getdefaultvalue((void*)&c_ReflectionParameter::i_getdefaultvalue, (void*)&c_ReflectionParameter::ifa_getdefaultvalue, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_getclass((void*)&c_ReflectionParameter::i_getclass, (void*)&c_ReflectionParameter::ifa_getclass, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_getposition((void*)&c_ReflectionParameter::i_getposition, (void*)&c_ReflectionParameter::ifa_getposition, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_isoptional((void*)&c_ReflectionParameter::i_isoptional, (void*)&c_ReflectionParameter::ifa_isoptional, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_getdeclaringclass((void*)&c_ReflectionParameter::i_getdeclaringclass, (void*)&c_ReflectionParameter::ifa_getdeclaringclass, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_isdefaultvalueavailable((void*)&c_ReflectionParameter::i_isdefaultvalueavailable, (void*)&c_ReflectionParameter::ifa_isdefaultvalueavailable, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_getname((void*)&c_ReflectionParameter::i_getname, (void*)&c_ReflectionParameter::ifa_getname, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_export((void*)&c_ReflectionParameter::i_export, (void*)&c_ReflectionParameter::ifa_export, 3, 12, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_allowsnull((void*)&c_ReflectionParameter::i_allowsnull, (void*)&c_ReflectionParameter::ifa_allowsnull, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci___construct((void*)&c_ReflectionParameter::i___construct, (void*)&c_ReflectionParameter::ifa___construct, 2, 4, 0x0000000000000000LL);
Variant c_ReflectionParameter::i___construct(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa___construct);
}
Variant c_ReflectionParameter::i___tostring(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa___tostring);
}
Variant c_ReflectionParameter::i_export(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_export);
}
Variant c_ReflectionParameter::i_getname(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getname);
}
Variant c_ReflectionParameter::i_ispassedbyreference(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_ispassedbyreference);
}
Variant c_ReflectionParameter::i_getdeclaringclass(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getdeclaringclass);
}
Variant c_ReflectionParameter::i_getclass(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getclass);
}
Variant c_ReflectionParameter::i_isarray(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isarray);
}
Variant c_ReflectionParameter::i_allowsnull(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_allowsnull);
}
Variant c_ReflectionParameter::i_isoptional(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isoptional);
}
Variant c_ReflectionParameter::i_isdefaultvalueavailable(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isdefaultvalueavailable);
}
Variant c_ReflectionParameter::i_getdefaultvalue(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getdefaultvalue);
}
Variant c_ReflectionParameter::i_getposition(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getposition);
}
Variant c_ReflectionParameter::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_ReflectionParameter);
  }
  c_ReflectionParameter *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionParameter*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ReflectionParameter::__construct", count, 2, 2, 2);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___construct(arg0, arg1), null);
}
Variant c_ReflectionParameter::ifa___tostring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___tostring, coo_ReflectionParameter);
  }
  c_ReflectionParameter *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionParameter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionParameter::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_ReflectionParameter::ifa_export(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("ReflectionParameter::export", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (c_ReflectionParameter::t_export(arg0, arg1, arg2));
}
Variant c_ReflectionParameter::ifa_getname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getname, coo_ReflectionParameter);
  }
  c_ReflectionParameter *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionParameter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionParameter::getName", 0, 1);
  return (self->t_getname());
}
Variant c_ReflectionParameter::ifa_ispassedbyreference(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_ispassedbyreference, coo_ReflectionParameter);
  }
  c_ReflectionParameter *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionParameter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionParameter::isPassedByReference", 0, 1);
  return (self->t_ispassedbyreference());
}
Variant c_ReflectionParameter::ifa_getdeclaringclass(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getdeclaringclass, coo_ReflectionParameter);
  }
  c_ReflectionParameter *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionParameter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionParameter::getDeclaringClass", 0, 1);
  return (self->t_getdeclaringclass());
}
Variant c_ReflectionParameter::ifa_getclass(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getclass, coo_ReflectionParameter);
  }
  c_ReflectionParameter *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionParameter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionParameter::getClass", 0, 1);
  return (self->t_getclass());
}
Variant c_ReflectionParameter::ifa_isarray(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isarray, coo_ReflectionParameter);
  }
  c_ReflectionParameter *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionParameter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionParameter::isArray", 0, 1);
  return (self->t_isarray());
}
Variant c_ReflectionParameter::ifa_allowsnull(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_allowsnull, coo_ReflectionParameter);
  }
  c_ReflectionParameter *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionParameter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionParameter::allowsNull", 0, 1);
  return (self->t_allowsnull());
}
Variant c_ReflectionParameter::ifa_isoptional(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isoptional, coo_ReflectionParameter);
  }
  c_ReflectionParameter *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionParameter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionParameter::isOptional", 0, 1);
  return (self->t_isoptional());
}
Variant c_ReflectionParameter::ifa_isdefaultvalueavailable(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isdefaultvalueavailable, coo_ReflectionParameter);
  }
  c_ReflectionParameter *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionParameter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionParameter::isDefaultValueAvailable", 0, 1);
  return (self->t_isdefaultvalueavailable());
}
Variant c_ReflectionParameter::ifa_getdefaultvalue(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getdefaultvalue, coo_ReflectionParameter);
  }
  c_ReflectionParameter *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionParameter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionParameter::getDefaultValue", 0, 1);
  return (self->t_getdefaultvalue());
}
Variant c_ReflectionParameter::ifa_getposition(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getposition, coo_ReflectionParameter);
  }
  c_ReflectionParameter *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionParameter*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionParameter::getPosition", 0, 1);
  return (self->t_getposition());
}
const MethodCallInfoTable c_ReflectionParameter::s_call_info_table[] = {
  { 0x6ED51288559D6063LL, 1, 17, "getDeclaringClass", &c_ReflectionParameter::ci_getdeclaringclass },
  { 0x23F51CDECC198965LL, 1, 7, "getName", &c_ReflectionParameter::ci_getname },
  { 0x0B5ABC58C98E70E8LL, 1, 6, "export", &c_ReflectionParameter::ci_export },
  { 0x4044F1EEBF3BB8C8LL, 0, 11, "getPosition", &c_ReflectionParameter::ci_getposition },
  { 0x4F51DA0B633E9909LL, 1, 8, "getClass", &c_ReflectionParameter::ci_getclass },
  { 0x24ED05F4504C4C09LL, 0, 10, "allowsNull", &c_ReflectionParameter::ci_allowsnull },
  { 0x27C482A6C7951E0CLL, 1, 15, "getDefaultValue", &c_ReflectionParameter::ci_getdefaultvalue },
  { 0x13E3F304BDD89FB1LL, 1, 19, "isPassedByReference", &c_ReflectionParameter::ci_ispassedbyreference },
  { 0x6E34805C91257C92LL, 1, 23, "isDefaultValueAvailable", &c_ReflectionParameter::ci_isdefaultvalueavailable },
  { 0x642C2D2994B34A13LL, 1, 10, "__toString", &c_ReflectionParameter::ci___tostring },
  { 0x2D6EF48BBAB22735LL, 1, 10, "isOptional", &c_ReflectionParameter::ci_isoptional },
  { 0x5A9CE40C0F25871DLL, 1, 7, "isArray", &c_ReflectionParameter::ci_isarray },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_ReflectionParameter::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_ReflectionParameter::s_call_info_index[] = {
  31,
  -1,-1,-1,0,-1,1,-1,-1,
  2,4,-1,-1,6,-1,-1,-1,
  -1,7,8,9,-1,10,-1,-1,
  -1,-1,-1,-1,-1,11,-1,12,

};
c_ReflectionParameter *c_ReflectionParameter::create(CVarRef v_func, CVarRef v_param) {
  CountableHelper h(this);
  init();
  t___construct(v_func, v_param);
  return this;
}
const ObjectStaticCallbacks cw_ReflectionParameter = {
  (ObjectData*(*)(ObjectData*))coo_ReflectionParameter,
  c_ReflectionParameter::s_call_info_table,c_ReflectionParameter::s_call_info_index,
  c_ReflectionParameter::s_instanceof_table,c_ReflectionParameter::s_instanceof_index,
  &c_ReflectionParameter::s_class_name,
  &c_ReflectionParameter::os_prop_table,&c_ReflectionParameter::ci___construct,0,0,0x0
};
/* SRC: classes/reflection.php line 49 */
void c_ReflectionParameter::t___construct(Variant v_func, Variant v_param) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::__construct);
  bool oldInCtor = gasInCtor(true);
  Variant v_params;

  Variant tmp_ref;
  if ((toBoolean(v_func) && toBoolean(v_param))) {
    {
      {
        MethodCallPackage mcp0;
        CVarRef obj0 = v_func;
        mcp0.methodCall((obj0), NAMSTR(s_sys_ss1902bc14, "getParameters"), 0x3E62225132C2A32DLL);
        const CallInfo *cit0 ATTRIBUTE_UNUSED = mcp0.ci;
        Variant tmp1(((mcp0.bindClass(fi)->getMeth0Args())(mcp0, 0)));
        v_params.assignVal(tmp1);
      }
      {
        const Variant &tmp0((v_params.rvalRef(v_param, tmp_ref, AccessFlags::Error).o_getPublic(NAMSTR(s_sys_ss33988b3e, "info"), true)));
        m_info.assignVal(tmp0);
        tmp_ref.unset();
      }
    }
  }
  gasInCtor(oldInCtor);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 56 */
String c_ReflectionParameter::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::__toString);
  return toString(null);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 75 */
Variant c_ReflectionParameter::t_export(CVarRef v_func, CVarRef v_param, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::export);
  p_ReflectionParameter v_obj;
  String v_str;

  {
    p_ReflectionParameter tmp0 = coo_ReflectionParameter();
    ((c_ReflectionParameter*)tmp0.get()->create(v_func, v_param));
    v_obj = tmp0;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 93 */
Variant c_ReflectionParameter::t_getname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::getName);
  return m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 108 */
Variant c_ReflectionParameter::t_ispassedbyreference() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::isPassedByReference);
  return m_info.rvalAt(NAMSTR(s_sys_ss134fd5fa, "ref"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 122 */
Variant c_ReflectionParameter::t_getdeclaringclass() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::getDeclaringClass);
  if (empty(m_info, NAMSTR(s_sys_ssc82dbd12, "class"), true)) {
    {
      return null;
    }
  }
  {
    p_ReflectionClass tmp0 = coo_ReflectionClass();
    const Variant &tmp1((m_info.rvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Error_Key)));
    return ((c_ReflectionClass*)tmp0.get()->create(tmp1), tmp0);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 139 */
Variant c_ReflectionParameter::t_getclass() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::getClass);
  if (empty(m_info, NAMSTR(s_sys_ss724a760a, "type"), true)) {
    {
      return null;
    }
  }
  {
    p_ReflectionClass tmp0 = coo_ReflectionClass();
    const Variant &tmp1((m_info.rvalAt(NAMSTR(s_sys_ss724a760a, "type"), AccessFlags::Error_Key)));
    return ((c_ReflectionClass*)tmp0.get()->create(tmp1), tmp0);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 155 */
bool c_ReflectionParameter::t_isarray() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::isArray);
  {
    const Variant &tmp0((m_info.rvalAt(NAMSTR(s_sys_ss724a760a, "type"), AccessFlags::Error_Key)));
    return equal(tmp0, NAMSTR(s_sys_ss8c04b960, "array"));
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 169 */
Variant c_ReflectionParameter::t_allowsnull() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::allowsNull);
  return m_info.rvalAt(NAMSTR(s_sys_ssedd47a43, "nullable"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 182 */
bool c_ReflectionParameter::t_isoptional() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::isOptional);
  return x_array_key_exists(NAMVAR(s_sys_svs570270cc, "default"), m_info);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 197 */
bool c_ReflectionParameter::t_isdefaultvalueavailable() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::isDefaultValueAvailable);
  return x_array_key_exists(NAMVAR(s_sys_svs570270cc, "default"), m_info);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 212 */
Variant c_ReflectionParameter::t_getdefaultvalue() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::getDefaultValue);
  Variant v_defaultValue;

  if (!(t_isoptional())) {
    {
      throw_exception(p_ReflectionException(((c_ReflectionException*)coo_ReflectionException())->create(NAMSTR(s_sys_ss4ad0c110, "Parameter is not optional"))));
    }
  }
  {
    const Variant &tmp0((m_info.rvalAt(NAMSTR(s_sys_ss570270cc, "default"), AccessFlags::Error_Key)));
    v_defaultValue.assignVal(tmp0);
  }
  if (instanceOf(v_defaultValue, NAMSTR(s_sys_ss41c7a197, "stdclass"))) {
    {
      {
        const String &tmp0((toString(v_defaultValue.o_getPublic(NAMSTR(s_sys_ss309aefff, "msg"), true))));
        x_hphp_throw_fatal_error(tmp0);
      }
    }
  }
  return v_defaultValue;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 233 */
Variant c_ReflectionParameter::t_getposition() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::getPosition);
  return m_info.rvalAt(NAMSTR(s_sys_ssc0ff3081, "index"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1619 */
const int64 q_ReflectionMethod$$IS_STATIC = 1LL;
const int64 q_ReflectionMethod$$IS_PUBLIC = 256LL;
const int64 q_ReflectionMethod$$IS_PROTECTED = 512LL;
const int64 q_ReflectionMethod$$IS_PRIVATE = 1024LL;
const int64 q_ReflectionMethod$$IS_ABSTRACT = 2LL;
const int64 q_ReflectionMethod$$IS_FINAL = 4LL;
IMPLEMENT_CLASS_NO_DEFAULT_SWEEP(ReflectionMethod)
const InstanceOfInfo c_ReflectionMethod::s_instanceof_table[] = {
  {0x43BBC8F6F28E44B0LL,1,"ReflectionMethod",&cw_ReflectionMethod},
  {0x33BD46E935281082LL,1,"ReflectionFunctionAbstract",&cw_ReflectionFunctionAbstract},
  {0x62F7F85447C0A605LL,1,"Reflector",(const ObjectStaticCallbacks*)2},
};
const int c_ReflectionMethod::s_instanceof_index[] = {
  7,
  0,-1,1,-1,-1,2,-1,-1,

};
CallInfo c_ReflectionMethod::ci___tostring((void*)&c_ReflectionMethod::i___tostring, (void*)&c_ReflectionMethod::ifa___tostring, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_invokeargs((void*)&c_ReflectionMethod::i_invokeargs, (void*)&c_ReflectionMethod::ifa_invokeargs, 2, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_isdestructor((void*)&c_ReflectionMethod::i_isdestructor, (void*)&c_ReflectionMethod::ifa_isdestructor, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_isprotected((void*)&c_ReflectionMethod::i_isprotected, (void*)&c_ReflectionMethod::ifa_isprotected, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_getclosure((void*)&c_ReflectionMethod::i_getclosure, (void*)&c_ReflectionMethod::ifa_getclosure, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_getmodifiers((void*)&c_ReflectionMethod::i_getmodifiers, (void*)&c_ReflectionMethod::ifa_getmodifiers, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_invoke((void*)&c_ReflectionMethod::i_invoke, (void*)&c_ReflectionMethod::ifa_invoke, 1, 5, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_getdeclaringclass((void*)&c_ReflectionMethod::i_getdeclaringclass, (void*)&c_ReflectionMethod::ifa_getdeclaringclass, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_isfinal((void*)&c_ReflectionMethod::i_isfinal, (void*)&c_ReflectionMethod::ifa_isfinal, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_isprivate((void*)&c_ReflectionMethod::i_isprivate, (void*)&c_ReflectionMethod::ifa_isprivate, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_export((void*)&c_ReflectionMethod::i_export, (void*)&c_ReflectionMethod::ifa_export, 3, 12, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_isstatic((void*)&c_ReflectionMethod::i_isstatic, (void*)&c_ReflectionMethod::ifa_isstatic, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_isabstract((void*)&c_ReflectionMethod::i_isabstract, (void*)&c_ReflectionMethod::ifa_isabstract, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_isconstructor((void*)&c_ReflectionMethod::i_isconstructor, (void*)&c_ReflectionMethod::ifa_isconstructor, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_ispublic((void*)&c_ReflectionMethod::i_ispublic, (void*)&c_ReflectionMethod::ifa_ispublic, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci___construct((void*)&c_ReflectionMethod::i___construct, (void*)&c_ReflectionMethod::ifa___construct, 2, 4, 0x0000000000000000LL);
Variant c_ReflectionMethod::i___construct(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa___construct);
}
Variant c_ReflectionMethod::i___tostring(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa___tostring);
}
Variant c_ReflectionMethod::i_export(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_export);
}
Variant c_ReflectionMethod::i_invoke(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_invoke, coo_ReflectionMethod);
  }
  c_ReflectionMethod *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionMethod*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  if (UNLIKELY(count < 1)) return throw_missing_arguments("ReflectionMethod::invoke", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (self->t_invoke(count, arg0, p));
  }
}
Variant c_ReflectionMethod::i_invokeargs(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_invokeargs);
}
Variant c_ReflectionMethod::i_isfinal(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isfinal);
}
Variant c_ReflectionMethod::i_isabstract(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isabstract);
}
Variant c_ReflectionMethod::i_ispublic(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_ispublic);
}
Variant c_ReflectionMethod::i_isprivate(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isprivate);
}
Variant c_ReflectionMethod::i_isprotected(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isprotected);
}
Variant c_ReflectionMethod::i_isstatic(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isstatic);
}
Variant c_ReflectionMethod::i_isconstructor(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isconstructor);
}
Variant c_ReflectionMethod::i_isdestructor(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isdestructor);
}
Variant c_ReflectionMethod::i_getmodifiers(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getmodifiers);
}
Variant c_ReflectionMethod::i_getclosure(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getclosure);
}
Variant c_ReflectionMethod::i_getdeclaringclass(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getdeclaringclass);
}
Variant c_ReflectionMethod::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_ReflectionMethod);
  }
  c_ReflectionMethod *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionMethod*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("ReflectionMethod::__construct", count, 1, 2, 2);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t___construct(arg0), null);
  CVarRef arg1(a1);
  return (self->t___construct(arg0, arg1), null);
}
Variant c_ReflectionMethod::ifa___tostring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___tostring, coo_ReflectionMethod);
  }
  c_ReflectionMethod *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionMethod*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionMethod::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_ReflectionMethod::ifa_export(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("ReflectionMethod::export", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (c_ReflectionMethod::t_export(arg0, arg1, arg2));
}
Variant c_ReflectionMethod::ifa_invoke(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_invoke, coo_ReflectionMethod);
  }
  c_ReflectionMethod *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionMethod*>(mcp.obj));
  if (UNLIKELY(count < 1)) return throw_missing_arguments("ReflectionMethod::invoke", count+1, 1);
  CVarRef arg0(a0);
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (self->t_invoke(count, arg0, p));
}
Variant c_ReflectionMethod::ifa_invokeargs(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_invokeargs, coo_ReflectionMethod);
  }
  c_ReflectionMethod *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionMethod*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ReflectionMethod::invokeArgs", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_invokeargs(arg0, arg1));
}
Variant c_ReflectionMethod::ifa_isfinal(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isfinal, coo_ReflectionMethod);
  }
  c_ReflectionMethod *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionMethod*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionMethod::isFinal", 0, 1);
  return (self->t_isfinal());
}
Variant c_ReflectionMethod::ifa_isabstract(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isabstract, coo_ReflectionMethod);
  }
  c_ReflectionMethod *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionMethod*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionMethod::isAbstract", 0, 1);
  return (self->t_isabstract());
}
Variant c_ReflectionMethod::ifa_ispublic(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_ispublic, coo_ReflectionMethod);
  }
  c_ReflectionMethod *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionMethod*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionMethod::isPublic", 0, 1);
  return (self->t_ispublic());
}
Variant c_ReflectionMethod::ifa_isprivate(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isprivate, coo_ReflectionMethod);
  }
  c_ReflectionMethod *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionMethod*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionMethod::isPrivate", 0, 1);
  return (self->t_isprivate());
}
Variant c_ReflectionMethod::ifa_isprotected(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isprotected, coo_ReflectionMethod);
  }
  c_ReflectionMethod *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionMethod*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionMethod::isProtected", 0, 1);
  return (self->t_isprotected());
}
Variant c_ReflectionMethod::ifa_isstatic(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isstatic, coo_ReflectionMethod);
  }
  c_ReflectionMethod *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionMethod*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionMethod::isStatic", 0, 1);
  return (self->t_isstatic());
}
Variant c_ReflectionMethod::ifa_isconstructor(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isconstructor, coo_ReflectionMethod);
  }
  c_ReflectionMethod *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionMethod*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionMethod::isConstructor", 0, 1);
  return (self->t_isconstructor());
}
Variant c_ReflectionMethod::ifa_isdestructor(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isdestructor, coo_ReflectionMethod);
  }
  c_ReflectionMethod *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionMethod*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionMethod::isDestructor", 0, 1);
  return (self->t_isdestructor());
}
Variant c_ReflectionMethod::ifa_getmodifiers(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getmodifiers, coo_ReflectionMethod);
  }
  c_ReflectionMethod *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionMethod*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionMethod::getModifiers", 0, 1);
  return (self->t_getmodifiers());
}
Variant c_ReflectionMethod::ifa_getclosure(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getclosure, coo_ReflectionMethod);
  }
  c_ReflectionMethod *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionMethod*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionMethod::getClosure", 0, 1);
  return (self->t_getclosure());
}
Variant c_ReflectionMethod::ifa_getdeclaringclass(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getdeclaringclass, coo_ReflectionMethod);
  }
  c_ReflectionMethod *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionMethod*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionMethod::getDeclaringClass", 0, 1);
  return (self->t_getdeclaringclass());
}
const MethodCallInfoTable c_ReflectionMethod::s_call_info_table[] = {
  { 0x3FCE192CF6199942LL, 1, 6, "invoke", &c_ReflectionMethod::ci_invoke },
  { 0x33A6C2CFBDB05EE2LL, 0, 10, "getClosure", &c_ReflectionMethod::ci_getclosure },
  { 0x6ED51288559D6063LL, 1, 17, "getDeclaringClass", &c_ReflectionMethod::ci_getdeclaringclass },
  { 0x3235AF57F23103C4LL, 1, 10, "invokeArgs", &c_ReflectionMethod::ci_invokeargs },
  { 0x51A20EA0E327F607LL, 1, 12, "isDestructor", &c_ReflectionMethod::ci_isdestructor },
  { 0x0B5ABC58C98E70E8LL, 1, 6, "export", &c_ReflectionMethod::ci_export },
  { 0x2D7209A590477CEALL, 1, 11, "isProtected", &c_ReflectionMethod::ci_isprotected },
  { 0x06FB6A7DC3D795AELL, 1, 7, "isFinal", &c_ReflectionMethod::ci_isfinal },
  { 0x37AAE0845E2F636FLL, 1, 9, "isPrivate", &c_ReflectionMethod::ci_isprivate },
  { 0x642C2D2994B34A13LL, 1, 10, "__toString", &c_ReflectionMethod::ci___tostring },
  { 0x24253EBA491D6014LL, 1, 12, "getModifiers", &c_ReflectionMethod::ci_getmodifiers },
  { 0x7460D945DA32FDB7LL, 1, 10, "isAbstract", &c_ReflectionMethod::ci_isabstract },
  { 0x7A15DC56E8CC0B19LL, 1, 8, "isStatic", &c_ReflectionMethod::ci_isstatic },
  { 0x654B5F965C5CAC7ALL, 1, 13, "isConstructor", &c_ReflectionMethod::ci_isconstructor },
  { 0x2820F10358723B7CLL, 1, 8, "isPublic", &c_ReflectionMethod::ci_ispublic },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_ReflectionMethod::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_ReflectionMethod::s_call_info_index[] = {
  31,
  -1,-1,0,2,3,-1,-1,4,
  5,-1,6,-1,-1,-1,7,8,
  -1,-1,-1,9,10,-1,-1,11,
  -1,12,13,-1,14,-1,-1,15,

};
c_ReflectionMethod *c_ReflectionMethod::create(CVarRef v_cls, CVarRef v_name //  = NAMVAR(s_sys_svs00000000, "")
) {
  CountableHelper h(this);
  init();
  t___construct(v_cls, v_name);
  return this;
}
const ObjectStaticCallbacks cw_ReflectionMethod = {
  (ObjectData*(*)(ObjectData*))coo_ReflectionMethod,
  c_ReflectionMethod::s_call_info_table,c_ReflectionMethod::s_call_info_index,
  c_ReflectionMethod::s_instanceof_table,c_ReflectionMethod::s_instanceof_index,
  &c_ReflectionMethod::s_class_name,
  &c_ReflectionMethod::os_prop_table,&c_ReflectionMethod::ci___construct,0,&cw_ReflectionFunctionAbstract,0x0
};
/* SRC: classes/reflection.php line 1631 */
void c_ReflectionMethod::t___construct(Variant v_cls, Variant v_name //  = NAMSTR(s_sys_ss00000000, "")
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::__construct);
  bool oldInCtor = gasInCtor(true);
  Variant v_arr;
  Variant v_method;

  if ((!(toBoolean(v_name)) && x_is_string(v_cls))) {
    {
      {
        const Variant &tmp0((x_explode(NAMSTR(s_sys_ss819481f3, "::"), toString(v_cls))));
        v_arr.assignVal(tmp0);
      }
      {
        bool tmp0;
        {
          int tmp1((x_count(v_arr)));
          tmp0 = (equal(tmp1, 2LL));
        }
        if (tmp0) {
          {
            {
              const Variant &tmp0((v_arr.rvalAt(0LL, AccessFlags::Error)));
              v_cls.assignVal(tmp0);
            }
            {
              const Variant &tmp0((v_arr.rvalAt(1LL, AccessFlags::Error)));
              v_name.assignVal(tmp0);
            }
          }
        }
      }
    }
  }
  if ((toBoolean(v_cls) && toBoolean(v_name))) {
    {
      if (!(x_is_object(v_cls))) {
        {
          {
            p_ReflectionClass tmp0 = coo_ReflectionClass();
            ((c_ReflectionClass*)tmp0.get()->create(v_cls));
            v_cls = tmp0;
          }
        }
      }
      else {
        {
          {
            p_ReflectionClass tmp0 = coo_ReflectionClass();
            const Variant &tmp1((x_get_class(v_cls)));
            ((c_ReflectionClass*)tmp0.get()->create(tmp1));
            v_cls = tmp0;
          }
        }
      }
      {
        MethodCallPackage mcp0;
        CVarRef obj0 = v_cls;
        mcp0.methodCall((obj0), NAMSTR(s_sys_sscdbb2d67, "getMethod"), 0x0D81ECE253A3B5B6LL);
        const CallInfo *cit0 ATTRIBUTE_UNUSED = mcp0.ci;
        Variant tmp1(((mcp0.bindClass(fi)->getMeth1Args())(mcp0, 1, v_name)));
        v_method.assignVal(tmp1);
      }
      if (toBoolean(v_method)) {
        {
          {
            const Variant &tmp0((v_method.o_get(NAMSTR(s_sys_ss33988b3e, "info"), true)));
            m_info.assignVal(tmp0);
          }
          {
            const Variant &tmp0((v_method.o_getPublic(NAMSTR(s_sys_ssdc3cbddc, "name"), true)));
            m_name.assignVal(tmp0);
          }
          {
            const Variant &tmp0((v_method.o_getPublic(NAMSTR(s_sys_ssc82dbd12, "class"), true)));
            m_class.assignVal(tmp0);
          }
        }
      }
    }
  }
  gasInCtor(oldInCtor);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1654 */
String c_ReflectionMethod::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::__toString);
  return toString(null);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1675 */
Variant c_ReflectionMethod::t_export(Variant v_cls, CVarRef v_name, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::export);
  Variant v_obj;
  String v_str;

  if (!(x_is_object(v_cls))) {
    {
      {
        p_ReflectionClass tmp0 = coo_ReflectionClass();
        ((c_ReflectionClass*)tmp0.get()->create(v_cls));
        v_cls = tmp0;
      }
    }
  }
  else {
    {
      {
        p_ReflectionClass tmp0 = coo_ReflectionClass();
        const Variant &tmp1((x_get_class(v_cls)));
        ((c_ReflectionClass*)tmp0.get()->create(tmp1));
        v_cls = tmp0;
      }
    }
  }
  {
    MethodCallPackage mcp0;
    CVarRef obj0 = v_cls;
    mcp0.methodCall((obj0), NAMSTR(s_sys_sscdbb2d67, "getMethod"), 0x0D81ECE253A3B5B6LL);
    const CallInfo *cit0 ATTRIBUTE_UNUSED = mcp0.ci;
    Variant tmp1(((mcp0.bindClass(fi)->getMeth1Args())(mcp0, 1, v_name)));
    v_obj.assignVal(tmp1);
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1700 */
Variant c_ReflectionMethod::t_invoke(int num_args, CVarRef v_obj, Array args /* = Array() */) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::invoke);
  Variant v_args;

  {
    const Array &tmp0((func_get_args(num_args, Array(ArrayInit(1).set(v_obj).create()),args)));
    v_args = tmp0;
  }
  x_array_shift(ref(v_args));
  {
    Variant tmp0((v_obj));
    const String &tmp1((toString(m_info.rvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Error_Key))));
    const String &tmp2((toString(m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key))));
    return x_hphp_invoke_method(tmp0, tmp1, tmp2, toArray(v_args));
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1721 */
Variant c_ReflectionMethod::t_invokeargs(CVarRef v_obj, CVarRef v_args) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::invokeArgs);
  {
    Variant tmp0((v_obj));
    const String &tmp1((toString(m_info.rvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Error_Key))));
    const String &tmp2((toString(m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key))));
    const Array &tmp3((toArray(x_array_values(v_args))));
    return x_hphp_invoke_method(tmp0, tmp1, tmp2, tmp3);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1734 */
Variant c_ReflectionMethod::t_isfinal() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isFinal);
  return m_info.rvalAt(NAMSTR(s_sys_ss2145036e, "final"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1747 */
Variant c_ReflectionMethod::t_isabstract() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isAbstract);
  return m_info.rvalAt(NAMSTR(s_sys_ss12c8a8a6, "abstract"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1759 */
bool c_ReflectionMethod::t_ispublic() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isPublic);
  {
    const Variant &tmp0((m_info.rvalAt(NAMSTR(s_sys_ss750cda3b, "access"), AccessFlags::Error_Key)));
    return equal(tmp0, NAMSTR(s_sys_ss4ce85288, "public"));
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1772 */
bool c_ReflectionMethod::t_isprivate() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isPrivate);
  {
    const Variant &tmp0((m_info.rvalAt(NAMSTR(s_sys_ss750cda3b, "access"), AccessFlags::Error_Key)));
    return equal(tmp0, NAMSTR(s_sys_sse781f7da, "private"));
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1785 */
bool c_ReflectionMethod::t_isprotected() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isProtected);
  {
    const Variant &tmp0((m_info.rvalAt(NAMSTR(s_sys_ss750cda3b, "access"), AccessFlags::Error_Key)));
    return equal(tmp0, NAMSTR(s_sys_ss9fb56979, "protected"));
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1797 */
Variant c_ReflectionMethod::t_isstatic() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isStatic);
  return m_info.rvalAt(NAMSTR(s_sys_ssf08d205d, "static"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1810 */
bool c_ReflectionMethod::t_isconstructor() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isConstructor);
  return isset(m_info, NAMSTR(s_sys_ssefecb9dd, "constructor"), true);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1823 */
bool c_ReflectionMethod::t_isdestructor() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isDestructor);
  {
    const Variant &tmp0((t_getname()));
    return equal(tmp0, NAMSTR(s_sys_ssa5a7f4f9, "__destruct"));
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1845 */
Variant c_ReflectionMethod::t_getmodifiers() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::getModifiers);
  return m_info.rvalAt(NAMSTR(s_sys_ss9f244c80, "modifiers"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1849 */
Variant c_ReflectionMethod::t_getclosure() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::getClosure);
  return m_info.rvalAt(NAMSTR(s_sys_ss4cd61020, "closure"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1863 */
Variant c_ReflectionMethod::t_getdeclaringclass() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::getDeclaringClass);
  if (empty(m_info, NAMSTR(s_sys_ssc82dbd12, "class"), true)) {
    {
      return null;
    }
  }
  {
    p_ReflectionClass tmp0 = coo_ReflectionClass();
    const Variant &tmp1((m_info.rvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Error_Key)));
    return ((c_ReflectionClass*)tmp0.get()->create(tmp1), tmp0);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1881 */
IMPLEMENT_CLASS_NO_DEFAULT_SWEEP(ReflectionExtension)
const InstanceOfInfo c_ReflectionExtension::s_instanceof_table[] = {
  {0x62F7F85447C0A605LL,1,"Reflector",(const ObjectStaticCallbacks*)2},
  {0x0B61E0BFCFA06573LL,1,"ReflectionExtension",&cw_ReflectionExtension},
};
const int c_ReflectionExtension::s_instanceof_index[] = {
  3,
  -1,0,-1,1,
};
CallInfo c_ReflectionExtension::ci_getclassnames((void*)&c_ReflectionExtension::i_getclassnames, (void*)&c_ReflectionExtension::ifa_getclassnames, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci___construct((void*)&c_ReflectionExtension::i___construct, (void*)&c_ReflectionExtension::ifa___construct, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci_export((void*)&c_ReflectionExtension::i_export, (void*)&c_ReflectionExtension::ifa_export, 2, 12, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci_getconstants((void*)&c_ReflectionExtension::i_getconstants, (void*)&c_ReflectionExtension::ifa_getconstants, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci_getname((void*)&c_ReflectionExtension::i_getname, (void*)&c_ReflectionExtension::ifa_getname, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci___tostring((void*)&c_ReflectionExtension::i___tostring, (void*)&c_ReflectionExtension::ifa___tostring, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci_getclasses((void*)&c_ReflectionExtension::i_getclasses, (void*)&c_ReflectionExtension::ifa_getclasses, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci_getversion((void*)&c_ReflectionExtension::i_getversion, (void*)&c_ReflectionExtension::ifa_getversion, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci_info((void*)&c_ReflectionExtension::i_info, (void*)&c_ReflectionExtension::ifa_info, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci_getinientries((void*)&c_ReflectionExtension::i_getinientries, (void*)&c_ReflectionExtension::ifa_getinientries, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci_getfunctions((void*)&c_ReflectionExtension::i_getfunctions, (void*)&c_ReflectionExtension::ifa_getfunctions, 0, 4, 0x0000000000000000LL);
Variant c_ReflectionExtension::i___construct(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa___construct);
}
Variant c_ReflectionExtension::i___tostring(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa___tostring);
}
Variant c_ReflectionExtension::i_export(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_export);
}
Variant c_ReflectionExtension::i_getname(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getname);
}
Variant c_ReflectionExtension::i_getversion(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getversion);
}
Variant c_ReflectionExtension::i_getfunctions(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getfunctions);
}
Variant c_ReflectionExtension::i_getconstants(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getconstants);
}
Variant c_ReflectionExtension::i_getinientries(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getinientries);
}
Variant c_ReflectionExtension::i_getclasses(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getclasses);
}
Variant c_ReflectionExtension::i_getclassnames(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getclassnames);
}
Variant c_ReflectionExtension::i_info(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_info);
}
Variant c_ReflectionExtension::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_ReflectionExtension);
  }
  c_ReflectionExtension *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionExtension*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ReflectionExtension::__construct", count, 1, 1, 2);
  CVarRef arg0(a0);
  return (self->t___construct(arg0), null);
}
Variant c_ReflectionExtension::ifa___tostring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___tostring, coo_ReflectionExtension);
  }
  c_ReflectionExtension *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionExtension*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionExtension::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_ReflectionExtension::ifa_export(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ReflectionExtension::export", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (c_ReflectionExtension::t_export(arg0, arg1));
}
Variant c_ReflectionExtension::ifa_getname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getname, coo_ReflectionExtension);
  }
  c_ReflectionExtension *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionExtension*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionExtension::getName", 0, 1);
  return (self->t_getname());
}
Variant c_ReflectionExtension::ifa_getversion(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getversion, coo_ReflectionExtension);
  }
  c_ReflectionExtension *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionExtension*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionExtension::getVersion", 0, 1);
  return (self->t_getversion());
}
Variant c_ReflectionExtension::ifa_getfunctions(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getfunctions, coo_ReflectionExtension);
  }
  c_ReflectionExtension *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionExtension*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionExtension::getFunctions", 0, 1);
  return (self->t_getfunctions());
}
Variant c_ReflectionExtension::ifa_getconstants(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getconstants, coo_ReflectionExtension);
  }
  c_ReflectionExtension *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionExtension*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionExtension::getConstants", 0, 1);
  return (self->t_getconstants());
}
Variant c_ReflectionExtension::ifa_getinientries(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getinientries, coo_ReflectionExtension);
  }
  c_ReflectionExtension *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionExtension*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionExtension::getINIEntries", 0, 1);
  return (self->t_getinientries());
}
Variant c_ReflectionExtension::ifa_getclasses(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getclasses, coo_ReflectionExtension);
  }
  c_ReflectionExtension *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionExtension*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionExtension::getClasses", 0, 1);
  return (self->t_getclasses());
}
Variant c_ReflectionExtension::ifa_getclassnames(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getclassnames, coo_ReflectionExtension);
  }
  c_ReflectionExtension *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionExtension*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionExtension::getClassNames", 0, 1);
  return (self->t_getclassnames());
}
Variant c_ReflectionExtension::ifa_info(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_info, coo_ReflectionExtension);
  }
  c_ReflectionExtension *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionExtension*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionExtension::info", 0, 1);
  return (self->t_info());
}
const MethodCallInfoTable c_ReflectionExtension::s_call_info_table[] = {
  { 0x0113D73FC859EDC2LL, 1, 10, "getClasses", &c_ReflectionExtension::ci_getclasses },
  { 0x23F51CDECC198965LL, 1, 7, "getName", &c_ReflectionExtension::ci_getname },
  { 0x0B5ABC58C98E70E8LL, 1, 6, "export", &c_ReflectionExtension::ci_export },
  { 0x652BDFA6E22F17AFLL, 1, 12, "getFunctions", &c_ReflectionExtension::ci_getfunctions },
  { 0x642C2D2994B34A13LL, 1, 10, "__toString", &c_ReflectionExtension::ci___tostring },
  { 0x5CE2786E11341594LL, 1, 13, "getClassNames", &c_ReflectionExtension::ci_getclassnames },
  { 0x1CC71CB013143955LL, 1, 12, "getConstants", &c_ReflectionExtension::ci_getconstants },
  { 0x306B5F4D1D03D335LL, 0, 13, "getINIEntries", &c_ReflectionExtension::ci_getinientries },
  { 0x7521E8833BE3D316LL, 1, 10, "getVersion", &c_ReflectionExtension::ci_getversion },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_ReflectionExtension::ci___construct },
  { 0x0F2EF58F157D479FLL, 0, 4, "info", &c_ReflectionExtension::ci_info },
  { 0, 1, 0, 0 }
};
const int c_ReflectionExtension::s_call_info_index[] = {
  31,
  -1,-1,0,-1,-1,1,-1,-1,
  2,-1,-1,-1,-1,-1,-1,3,
  -1,-1,-1,4,5,6,8,-1,
  -1,-1,-1,-1,-1,-1,-1,9,

};
c_ReflectionExtension *c_ReflectionExtension::create(CVarRef v_name) {
  CountableHelper h(this);
  init();
  t___construct(v_name);
  return this;
}
const ObjectStaticCallbacks cw_ReflectionExtension = {
  (ObjectData*(*)(ObjectData*))coo_ReflectionExtension,
  c_ReflectionExtension::s_call_info_table,c_ReflectionExtension::s_call_info_index,
  c_ReflectionExtension::s_instanceof_table,c_ReflectionExtension::s_instanceof_index,
  &c_ReflectionExtension::s_class_name,
  &c_ReflectionExtension::os_prop_table,&c_ReflectionExtension::ci___construct,0,0,0x0
};
/* SRC: classes/reflection.php line 1885 */
void c_ReflectionExtension::t___construct(Variant v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::__construct);
  bool oldInCtor = gasInCtor(true);
  {
    const Array &tmp0((x_hphp_get_extension_info(toString(v_name))));
    m_info = tmp0;
  }
  gasInCtor(oldInCtor);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1889 */
String c_ReflectionExtension::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::__toString);
  return toString(null);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1908 */
Variant c_ReflectionExtension::t_export(CVarRef v_name, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::export);
  p_ReflectionExtension v_obj;
  String v_str;

  {
    p_ReflectionExtension tmp0 = coo_ReflectionExtension();
    ((c_ReflectionExtension*)tmp0.get()->create(v_name));
    v_obj = tmp0;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1926 */
Variant c_ReflectionExtension::t_getname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getName);
  return m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1939 */
Variant c_ReflectionExtension::t_getversion() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getVersion);
  return m_info.rvalAt(NAMSTR(s_sys_ss7cd91db4, "version"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1955 */
Variant c_ReflectionExtension::t_getfunctions() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getFunctions);
  return m_info.rvalAt(NAMSTR(s_sys_ssc8396b02, "functions"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1968 */
Variant c_ReflectionExtension::t_getconstants() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getConstants);
  return m_info.rvalAt(NAMSTR(s_sys_ss623ae369, "constants"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1982 */
Variant c_ReflectionExtension::t_getinientries() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getINIEntries);
  return m_info.rvalAt(NAMSTR(s_sys_sscedef5dc, "ini"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1997 */
Variant c_ReflectionExtension::t_getclasses() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getClasses);
  return m_info.rvalAt(NAMSTR(s_sys_ss0415e4a0, "classes"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 2012 */
Array c_ReflectionExtension::t_getclassnames() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getClassNames);
  Array v_ret;
  Variant v_cls;

  v_ret = s_sys_sa00000000;
  {
    LOOP_COUNTER(1);
    Variant map2 = m_info.rvalAt(NAMSTR(s_sys_ss0415e4a0, "classes"), AccessFlags::Error_Key);
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v_cls);
      {
        {
          MethodCallPackage mcp0;
          CVarRef obj0 = v_cls;
          mcp0.methodCall((obj0), NAMSTR(s_sys_ssc2df217e, "getName"), 0x23F51CDECC198965LL);
          const CallInfo *cit0 ATTRIBUTE_UNUSED = mcp0.ci;
          Variant tmp1(((mcp0.bindClass(fi)->getMeth0Args())(mcp0, 0)));
          v_ret.append((tmp1));
        }
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 2028 */
Variant c_ReflectionExtension::t_info() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::info);
  return m_info.rvalAt(NAMSTR(s_sys_ss33988b3e, "info"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 461 */
const int64 q_ReflectionFunction$$IS_DEPRECATED = 262144LL;
IMPLEMENT_CLASS_NO_DEFAULT_SWEEP(ReflectionFunction)
const InstanceOfInfo c_ReflectionFunction::s_instanceof_table[] = {
  {0x21EF70351574EC09LL,1,"ReflectionFunction",&cw_ReflectionFunction},
  {0x33BD46E935281082LL,1,"ReflectionFunctionAbstract",&cw_ReflectionFunctionAbstract},
  {0x62F7F85447C0A605LL,1,"Reflector",(const ObjectStaticCallbacks*)2},
};
const int c_ReflectionFunction::s_instanceof_index[] = {
  7,
  -1,0,1,-1,-1,2,-1,-1,

};
CallInfo c_ReflectionFunction::ci_export((void*)&c_ReflectionFunction::i_export, (void*)&c_ReflectionFunction::ifa_export, 2, 12, 0x0000000000000000LL);
CallInfo c_ReflectionFunction::ci_invoke((void*)&c_ReflectionFunction::i_invoke, (void*)&c_ReflectionFunction::ifa_invoke, 0, 5, 0x0000000000000000LL);
CallInfo c_ReflectionFunction::ci_invokeargs((void*)&c_ReflectionFunction::i_invokeargs, (void*)&c_ReflectionFunction::ifa_invokeargs, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunction::ci___construct((void*)&c_ReflectionFunction::i___construct, (void*)&c_ReflectionFunction::ifa___construct, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunction::ci___tostring((void*)&c_ReflectionFunction::i___tostring, (void*)&c_ReflectionFunction::ifa___tostring, 0, 4, 0x0000000000000000LL);
Variant c_ReflectionFunction::i___construct(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa___construct);
}
Variant c_ReflectionFunction::i___tostring(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa___tostring);
}
Variant c_ReflectionFunction::i_export(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_export);
}
Variant c_ReflectionFunction::i_invoke(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_invoke, coo_ReflectionFunction);
  }
  c_ReflectionFunction *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionFunction*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  const Array &p(count > 0 ? ArrayUtil::EnsureIntKeys(params) : Array());
  return (self->t_invoke(count, p));
}
Variant c_ReflectionFunction::i_invokeargs(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_invokeargs);
}
Variant c_ReflectionFunction::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_ReflectionFunction);
  }
  c_ReflectionFunction *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionFunction*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ReflectionFunction::__construct", count, 1, 1, 2);
  CVarRef arg0(a0);
  return (self->t___construct(arg0), null);
}
Variant c_ReflectionFunction::ifa___tostring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___tostring, coo_ReflectionFunction);
  }
  c_ReflectionFunction *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionFunction*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionFunction::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_ReflectionFunction::ifa_export(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ReflectionFunction::export", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (c_ReflectionFunction::t_export(arg0, arg1));
}
Variant c_ReflectionFunction::ifa_invoke(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_invoke, coo_ReflectionFunction);
  }
  c_ReflectionFunction *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionFunction*>(mcp.obj));
  Array p;
  if (count >= 1) p.append(a0);
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (self->t_invoke(count, p));
}
Variant c_ReflectionFunction::ifa_invokeargs(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_invokeargs, coo_ReflectionFunction);
  }
  c_ReflectionFunction *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionFunction*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ReflectionFunction::invokeArgs", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_invokeargs(arg0));
}
const MethodCallInfoTable c_ReflectionFunction::s_call_info_table[] = {
  { 0x3FCE192CF6199942LL, 1, 6, "invoke", &c_ReflectionFunction::ci_invoke },
  { 0x642C2D2994B34A13LL, 1, 10, "__toString", &c_ReflectionFunction::ci___tostring },
  { 0x3235AF57F23103C4LL, 1, 10, "invokeArgs", &c_ReflectionFunction::ci_invokeargs },
  { 0x0B5ABC58C98E70E8LL, 1, 6, "export", &c_ReflectionFunction::ci_export },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_ReflectionFunction::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_ReflectionFunction::s_call_info_index[] = {
  15,
  -1,-1,0,1,2,-1,-1,-1,
  3,-1,-1,-1,-1,-1,-1,4,

};
c_ReflectionFunction *c_ReflectionFunction::create(CVarRef v_name) {
  CountableHelper h(this);
  init();
  t___construct(v_name);
  return this;
}
const ObjectStaticCallbacks cw_ReflectionFunction = {
  (ObjectData*(*)(ObjectData*))coo_ReflectionFunction,
  c_ReflectionFunction::s_call_info_table,c_ReflectionFunction::s_call_info_index,
  c_ReflectionFunction::s_instanceof_table,c_ReflectionFunction::s_instanceof_index,
  &c_ReflectionFunction::s_class_name,
  &c_ReflectionFunction::os_prop_table,&c_ReflectionFunction::ci___construct,0,&cw_ReflectionFunctionAbstract,0x0
};
/* SRC: classes/reflection.php line 465 */
void c_ReflectionFunction::t___construct(Variant v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunction, ReflectionFunction::__construct);
  bool oldInCtor = gasInCtor(true);
  {
    const Array &tmp0((x_hphp_get_function_info(toString(v_name))));
    m_info = tmp0;
  }
  if (empty(m_info)) {
    {
      {
        p_ReflectionException tmp0 = coo_ReflectionException();
        throw_exception(((c_ReflectionException*)tmp0.get()->create(concat3(NAMSTR(s_sys_ss985d885e, "Function "), toString(v_name), NAMSTR(s_sys_ss5784ed2b, " does not exist"))), tmp0));
      }
    }
  }
  gasInCtor(oldInCtor);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 472 */
String c_ReflectionFunction::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunction, ReflectionFunction::__toString);
  return toString(null);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 492 */
Variant c_ReflectionFunction::t_export(CVarRef v_name, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionFunction, ReflectionFunction::export);
  p_ReflectionFunction v_obj;
  String v_str;

  {
    p_ReflectionFunction tmp0 = coo_ReflectionFunction();
    ((c_ReflectionFunction*)tmp0.get()->create(v_name));
    v_obj = tmp0;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 508 */
Variant c_ReflectionFunction::t_invoke(int num_args, Array args /* = Array() */) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunction, ReflectionFunction::invoke);
  Array v_args;

  {
    const Array &tmp0(((args.isNull() ? Array::Create() : args)));
    v_args = tmp0;
  }
  {
    const String &tmp0((toString(m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key))));
    return x_hphp_invoke(tmp0, v_args);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 523 */
Variant c_ReflectionFunction::t_invokeargs(CVarRef v_args) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunction, ReflectionFunction::invokeArgs);
  {
    const String &tmp0((toString(m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key))));
    const Array &tmp1((toArray(x_array_values(v_args))));
    return x_hphp_invoke(tmp0, tmp1);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1367 */
const int64 q_ReflectionProperty$$IS_STATIC = 1LL;
const int64 q_ReflectionProperty$$IS_PUBLIC = 256LL;
const int64 q_ReflectionProperty$$IS_PROTECTED = 512LL;
const int64 q_ReflectionProperty$$IS_PRIVATE = 1024LL;
IMPLEMENT_CLASS_NO_DEFAULT_SWEEP(ReflectionProperty)
const InstanceOfInfo c_ReflectionProperty::s_instanceof_table[] = {
  {0x75AA2571BDB659E4LL,1,"ReflectionProperty",&cw_ReflectionProperty},
  {0x62F7F85447C0A605LL,1,"Reflector",(const ObjectStaticCallbacks*)2},
};
const int c_ReflectionProperty::s_instanceof_index[] = {
  3,
  0,1,-1,-1,
};
CallInfo c_ReflectionProperty::ci___tostring((void*)&c_ReflectionProperty::i___tostring, (void*)&c_ReflectionProperty::ifa___tostring, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_setaccessible((void*)&c_ReflectionProperty::i_setaccessible, (void*)&c_ReflectionProperty::ifa_setaccessible, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_isprotected((void*)&c_ReflectionProperty::i_isprotected, (void*)&c_ReflectionProperty::ifa_isprotected, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_getmodifiers((void*)&c_ReflectionProperty::i_getmodifiers, (void*)&c_ReflectionProperty::ifa_getmodifiers, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_getvalue((void*)&c_ReflectionProperty::i_getvalue, (void*)&c_ReflectionProperty::ifa_getvalue, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_getdeclaringclass((void*)&c_ReflectionProperty::i_getdeclaringclass, (void*)&c_ReflectionProperty::ifa_getdeclaringclass, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_isdefault((void*)&c_ReflectionProperty::i_isdefault, (void*)&c_ReflectionProperty::ifa_isdefault, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_isprivate((void*)&c_ReflectionProperty::i_isprivate, (void*)&c_ReflectionProperty::ifa_isprivate, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_getdoccomment((void*)&c_ReflectionProperty::i_getdoccomment, (void*)&c_ReflectionProperty::ifa_getdoccomment, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_getname((void*)&c_ReflectionProperty::i_getname, (void*)&c_ReflectionProperty::ifa_getname, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_export((void*)&c_ReflectionProperty::i_export, (void*)&c_ReflectionProperty::ifa_export, 3, 12, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_isstatic((void*)&c_ReflectionProperty::i_isstatic, (void*)&c_ReflectionProperty::ifa_isstatic, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_setvalue((void*)&c_ReflectionProperty::i_setvalue, (void*)&c_ReflectionProperty::ifa_setvalue, 2, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_ispublic((void*)&c_ReflectionProperty::i_ispublic, (void*)&c_ReflectionProperty::ifa_ispublic, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci___construct((void*)&c_ReflectionProperty::i___construct, (void*)&c_ReflectionProperty::ifa___construct, 2, 4, 0x0000000000000000LL);
Variant c_ReflectionProperty::i___construct(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa___construct);
}
Variant c_ReflectionProperty::i___tostring(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa___tostring);
}
Variant c_ReflectionProperty::i_export(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_export);
}
Variant c_ReflectionProperty::i_getname(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getname);
}
Variant c_ReflectionProperty::i_ispublic(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_ispublic);
}
Variant c_ReflectionProperty::i_isprivate(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isprivate);
}
Variant c_ReflectionProperty::i_isprotected(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isprotected);
}
Variant c_ReflectionProperty::i_isstatic(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isstatic);
}
Variant c_ReflectionProperty::i_isdefault(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isdefault);
}
Variant c_ReflectionProperty::i_setaccessible(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_setaccessible);
}
Variant c_ReflectionProperty::i_getmodifiers(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getmodifiers);
}
Variant c_ReflectionProperty::i_getvalue(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getvalue);
}
Variant c_ReflectionProperty::i_setvalue(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_setvalue);
}
Variant c_ReflectionProperty::i_getdeclaringclass(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getdeclaringclass);
}
Variant c_ReflectionProperty::i_getdoccomment(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getdoccomment);
}
Variant c_ReflectionProperty::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_ReflectionProperty);
  }
  c_ReflectionProperty *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionProperty*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ReflectionProperty::__construct", count, 2, 2, 2);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t___construct(arg0, arg1), null);
}
Variant c_ReflectionProperty::ifa___tostring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___tostring, coo_ReflectionProperty);
  }
  c_ReflectionProperty *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionProperty*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionProperty::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_ReflectionProperty::ifa_export(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 3)) return throw_wrong_arguments("ReflectionProperty::export", count, 3, 3, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  CVarRef arg2(a2);
  return (c_ReflectionProperty::t_export(arg0, arg1, arg2));
}
Variant c_ReflectionProperty::ifa_getname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getname, coo_ReflectionProperty);
  }
  c_ReflectionProperty *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionProperty*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionProperty::getName", 0, 1);
  return (self->t_getname());
}
Variant c_ReflectionProperty::ifa_ispublic(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_ispublic, coo_ReflectionProperty);
  }
  c_ReflectionProperty *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionProperty*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionProperty::isPublic", 0, 1);
  return (self->t_ispublic());
}
Variant c_ReflectionProperty::ifa_isprivate(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isprivate, coo_ReflectionProperty);
  }
  c_ReflectionProperty *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionProperty*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionProperty::isPrivate", 0, 1);
  return (self->t_isprivate());
}
Variant c_ReflectionProperty::ifa_isprotected(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isprotected, coo_ReflectionProperty);
  }
  c_ReflectionProperty *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionProperty*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionProperty::isProtected", 0, 1);
  return (self->t_isprotected());
}
Variant c_ReflectionProperty::ifa_isstatic(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isstatic, coo_ReflectionProperty);
  }
  c_ReflectionProperty *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionProperty*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionProperty::isStatic", 0, 1);
  return (self->t_isstatic());
}
Variant c_ReflectionProperty::ifa_isdefault(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isdefault, coo_ReflectionProperty);
  }
  c_ReflectionProperty *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionProperty*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionProperty::isDefault", 0, 1);
  return (self->t_isdefault());
}
Variant c_ReflectionProperty::ifa_setaccessible(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setaccessible, coo_ReflectionProperty);
  }
  c_ReflectionProperty *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionProperty*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ReflectionProperty::setAccessible", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_setaccessible(arg0), null);
}
Variant c_ReflectionProperty::ifa_getmodifiers(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getmodifiers, coo_ReflectionProperty);
  }
  c_ReflectionProperty *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionProperty*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionProperty::getModifiers", 0, 1);
  return (self->t_getmodifiers());
}
Variant c_ReflectionProperty::ifa_getvalue(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getvalue, coo_ReflectionProperty);
  }
  c_ReflectionProperty *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionProperty*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("ReflectionProperty::getValue", 1, 1);
  if (count <= 0) return (self->t_getvalue());
  CVarRef arg0(a0);
  return (self->t_getvalue(arg0));
}
Variant c_ReflectionProperty::ifa_setvalue(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setvalue, coo_ReflectionProperty);
  }
  c_ReflectionProperty *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionProperty*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ReflectionProperty::setValue", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_setvalue(arg0, arg1), null);
}
Variant c_ReflectionProperty::ifa_getdeclaringclass(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getdeclaringclass, coo_ReflectionProperty);
  }
  c_ReflectionProperty *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionProperty*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionProperty::getDeclaringClass", 0, 1);
  return (self->t_getdeclaringclass());
}
Variant c_ReflectionProperty::ifa_getdoccomment(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getdoccomment, coo_ReflectionProperty);
  }
  c_ReflectionProperty *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionProperty*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionProperty::getDocComment", 0, 1);
  return (self->t_getdoccomment());
}
const MethodCallInfoTable c_ReflectionProperty::s_call_info_table[] = {
  { 0x791E9751F5B8C5A2LL, 1, 13, "setAccessible", &c_ReflectionProperty::ci_setaccessible },
  { 0x56879BCEB40997E3LL, 1, 8, "getValue", &c_ReflectionProperty::ci_getvalue },
  { 0x6ED51288559D6063LL, 0, 17, "getDeclaringClass", &c_ReflectionProperty::ci_getdeclaringclass },
  { 0x23F51CDECC198965LL, 1, 7, "getName", &c_ReflectionProperty::ci_getname },
  { 0x0B5ABC58C98E70E8LL, 1, 6, "export", &c_ReflectionProperty::ci_export },
  { 0x2D7209A590477CEALL, 1, 11, "isProtected", &c_ReflectionProperty::ci_isprotected },
  { 0x37AAE0845E2F636FLL, 1, 9, "isPrivate", &c_ReflectionProperty::ci_isprivate },
  { 0x642C2D2994B34A13LL, 1, 10, "__toString", &c_ReflectionProperty::ci___tostring },
  { 0x24253EBA491D6014LL, 1, 12, "getModifiers", &c_ReflectionProperty::ci_getmodifiers },
  { 0x384A52597AB11F15LL, 1, 9, "isDefault", &c_ReflectionProperty::ci_isdefault },
  { 0x36FBED35008C8DB5LL, 0, 8, "setValue", &c_ReflectionProperty::ci_setvalue },
  { 0x7C4F424FDA56ADF8LL, 1, 13, "getDocComment", &c_ReflectionProperty::ci_getdoccomment },
  { 0x7A15DC56E8CC0B19LL, 1, 8, "isStatic", &c_ReflectionProperty::ci_isstatic },
  { 0x2820F10358723B7CLL, 1, 8, "isPublic", &c_ReflectionProperty::ci_ispublic },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_ReflectionProperty::ci___construct },
  { 0, 1, 0, 0 }
};
const int c_ReflectionProperty::s_call_info_index[] = {
  31,
  -1,-1,0,1,-1,3,-1,-1,
  4,-1,5,-1,-1,-1,-1,6,
  -1,-1,-1,7,8,9,-1,-1,
  11,12,-1,-1,13,-1,-1,14,

};
c_ReflectionProperty *c_ReflectionProperty::create(CVarRef v_cls, CVarRef v_name) {
  CountableHelper h(this);
  init();
  t___construct(v_cls, v_name);
  return this;
}
const ObjectStaticCallbacks cw_ReflectionProperty = {
  (ObjectData*(*)(ObjectData*))coo_ReflectionProperty,
  c_ReflectionProperty::s_call_info_table,c_ReflectionProperty::s_call_info_index,
  c_ReflectionProperty::s_instanceof_table,c_ReflectionProperty::s_instanceof_index,
  &c_ReflectionProperty::s_class_name,
  &c_ReflectionProperty::os_prop_table,&c_ReflectionProperty::ci___construct,0,0,0x0
};
/* SRC: classes/reflection.php line 1377 */
void c_ReflectionProperty::t___construct(Variant v_cls, Variant v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::__construct);
  bool oldInCtor = gasInCtor(true);
  Variant v_prop;

  if ((toBoolean(v_cls) && toBoolean(v_name))) {
    {
      if (!(x_is_object(v_cls))) {
        {
          {
            p_ReflectionClass tmp0 = coo_ReflectionClass();
            ((c_ReflectionClass*)tmp0.get()->create(v_cls));
            v_cls = tmp0;
          }
        }
      }
      else {
        {
          {
            p_ReflectionClass tmp0 = coo_ReflectionClass();
            const Variant &tmp1((x_get_class(v_cls)));
            ((c_ReflectionClass*)tmp0.get()->create(tmp1));
            v_cls = tmp0;
          }
        }
      }
      {
        MethodCallPackage mcp0;
        CVarRef obj0 = v_cls;
        mcp0.methodCall((obj0), NAMSTR(s_sys_ssd029c1ac, "getProperty"), 0x0FD73627FB023047LL);
        const CallInfo *cit0 ATTRIBUTE_UNUSED = mcp0.ci;
        Variant tmp1(((mcp0.bindClass(fi)->getMeth1Args())(mcp0, 1, v_name)));
        v_prop.assignVal(tmp1);
      }
      if (toBoolean(v_prop)) {
        {
          {
            const Variant &tmp0((v_prop.o_getPublic(NAMSTR(s_sys_ss33988b3e, "info"), true)));
            m_info.assignVal(tmp0);
          }
          {
            const Variant &tmp0((v_prop.o_getPublic(NAMSTR(s_sys_ssdc3cbddc, "name"), true)));
            m_name.assignVal(tmp0);
          }
          {
            const Variant &tmp0((v_prop.o_getPublic(NAMSTR(s_sys_ssc82dbd12, "class"), true)));
            m_class.assignVal(tmp0);
          }
        }
      }
    }
  }
  gasInCtor(oldInCtor);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1393 */
String c_ReflectionProperty::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::__toString);
  return toString(null);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1409 */
Variant c_ReflectionProperty::t_export(Variant v_cls, CVarRef v_name, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::export);
  Variant v_obj;
  String v_str;

  if (!(x_is_object(v_cls))) {
    {
      {
        p_ReflectionClass tmp0 = coo_ReflectionClass();
        ((c_ReflectionClass*)tmp0.get()->create(v_cls));
        v_cls = tmp0;
      }
    }
  }
  else {
    {
      {
        p_ReflectionClass tmp0 = coo_ReflectionClass();
        const Variant &tmp1((x_get_class(v_cls)));
        ((c_ReflectionClass*)tmp0.get()->create(tmp1));
        v_cls = tmp0;
      }
    }
  }
  {
    MethodCallPackage mcp0;
    CVarRef obj0 = v_cls;
    mcp0.methodCall((obj0), NAMSTR(s_sys_ssd029c1ac, "getProperty"), 0x0FD73627FB023047LL);
    const CallInfo *cit0 ATTRIBUTE_UNUSED = mcp0.ci;
    Variant tmp1(((mcp0.bindClass(fi)->getMeth1Args())(mcp0, 1, v_name)));
    v_obj.assignVal(tmp1);
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1432 */
Variant c_ReflectionProperty::t_getname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::getName);
  return m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1445 */
bool c_ReflectionProperty::t_ispublic() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::isPublic);
  {
    const Variant &tmp0((m_info.rvalAt(NAMSTR(s_sys_ss750cda3b, "access"), AccessFlags::Error_Key)));
    return equal(tmp0, NAMSTR(s_sys_ss4ce85288, "public"));
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1458 */
bool c_ReflectionProperty::t_isprivate() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::isPrivate);
  {
    const Variant &tmp0((m_info.rvalAt(NAMSTR(s_sys_ss750cda3b, "access"), AccessFlags::Error_Key)));
    return equal(tmp0, NAMSTR(s_sys_sse781f7da, "private"));
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1471 */
bool c_ReflectionProperty::t_isprotected() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::isProtected);
  {
    const Variant &tmp0((m_info.rvalAt(NAMSTR(s_sys_ss750cda3b, "access"), AccessFlags::Error_Key)));
    return equal(tmp0, NAMSTR(s_sys_ss9fb56979, "protected"));
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1484 */
Variant c_ReflectionProperty::t_isstatic() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::isStatic);
  return m_info.rvalAt(NAMSTR(s_sys_ssf08d205d, "static"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1498 */
Variant c_ReflectionProperty::t_isdefault() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::isDefault);
  return m_info.rvalAt(NAMSTR(s_sys_ss570270cc, "default"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1512 */
void c_ReflectionProperty::t_setaccessible(CVarRef v_accessible) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::setAccessible);
  throw_exception(p_ReflectionException(((c_ReflectionException*)coo_ReflectionException())->create(NAMSTR(s_sys_ssf82f565f, "ReflectionProperty::setAccessible is not supported"))));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1526 */
Variant c_ReflectionProperty::t_getmodifiers() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::getModifiers);
  return m_info.rvalAt(NAMSTR(s_sys_ss9f244c80, "modifiers"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1542 */
Variant c_ReflectionProperty::t_getvalue(CVarRef v_obj //  = null_variant
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::getValue);
  if (toBoolean(t_isstatic())) {
    {
      {
        const String &tmp0((toString(m_info.rvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Error_Key))));
        const String &tmp1((toString(m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key))));
        return x_hphp_get_static_property(tmp0, tmp1);
      }
    }
  }
  if (toBoolean(v_obj)) {
    {
      {
        const Object &tmp0((toObject(v_obj)));
        const String &tmp1((toString(m_info.rvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Error_Key))));
        const String &tmp2((toString(m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key))));
        return x_hphp_get_property(tmp0, tmp1, tmp2);
      }
    }
  }
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1567 */
void c_ReflectionProperty::t_setvalue(CVarRef v_obj, CVarRef v_value) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::setValue);
  if (toBoolean(t_isstatic())) {
    {
      {
        const String &tmp0((toString(m_info.rvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Error_Key))));
        const String &tmp1((toString(m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key))));
        x_hphp_set_static_property(tmp0, tmp1, v_value);
      }
    }
  }
  else {
    {
      {
        const Object &tmp0((toObject(v_obj)));
        const String &tmp1((toString(m_info.rvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Error_Key))));
        const String &tmp2((toString(m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key))));
        x_hphp_set_property(tmp0, tmp1, tmp2, v_value);
      }
    }
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1587 */
Variant c_ReflectionProperty::t_getdeclaringclass() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::getDeclaringClass);
  if (empty(m_info, NAMSTR(s_sys_ssc82dbd12, "class"), true)) {
    {
      return null;
    }
  }
  {
    p_ReflectionClass tmp0 = coo_ReflectionClass();
    const Variant &tmp1((m_info.rvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Error_Key)));
    return ((c_ReflectionClass*)tmp0.get()->create(tmp1), tmp0);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1604 */
Variant c_ReflectionProperty::t_getdoccomment() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::getDocComment);
  return m_info.rvalAt(NAMSTR(s_sys_ss9cfa17a6, "doc"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 248 */
IMPLEMENT_CLASS_NO_DEFAULT_SWEEP(ReflectionFunctionAbstract)
const InstanceOfInfo c_ReflectionFunctionAbstract::s_instanceof_table[] = {
  {0x33BD46E935281082LL,1,"ReflectionFunctionAbstract",&cw_ReflectionFunctionAbstract},
};
const int c_ReflectionFunctionAbstract::s_instanceof_index[] = {
  1,
  0,-1,
};
CallInfo c_ReflectionFunctionAbstract::ci_getnumberofrequiredparameters((void*)&c_ReflectionFunctionAbstract::i_getnumberofrequiredparameters, (void*)&c_ReflectionFunctionAbstract::ifa_getnumberofrequiredparameters, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_returnsreference((void*)&c_ReflectionFunctionAbstract::i_returnsreference, (void*)&c_ReflectionFunctionAbstract::ifa_returnsreference, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_getstartline((void*)&c_ReflectionFunctionAbstract::i_getstartline, (void*)&c_ReflectionFunctionAbstract::ifa_getstartline, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_getclosure((void*)&c_ReflectionFunctionAbstract::i_getclosure, (void*)&c_ReflectionFunctionAbstract::ifa_getclosure, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_getparameters((void*)&c_ReflectionFunctionAbstract::i_getparameters, (void*)&c_ReflectionFunctionAbstract::ifa_getparameters, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_getstaticvariables((void*)&c_ReflectionFunctionAbstract::i_getstaticvariables, (void*)&c_ReflectionFunctionAbstract::ifa_getstaticvariables, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_getnumberofparameters((void*)&c_ReflectionFunctionAbstract::i_getnumberofparameters, (void*)&c_ReflectionFunctionAbstract::ifa_getnumberofparameters, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_isuserdefined((void*)&c_ReflectionFunctionAbstract::i_isuserdefined, (void*)&c_ReflectionFunctionAbstract::ifa_isuserdefined, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_getdoccomment((void*)&c_ReflectionFunctionAbstract::i_getdoccomment, (void*)&c_ReflectionFunctionAbstract::ifa_getdoccomment, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_getfilename((void*)&c_ReflectionFunctionAbstract::i_getfilename, (void*)&c_ReflectionFunctionAbstract::ifa_getfilename, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_getname((void*)&c_ReflectionFunctionAbstract::i_getname, (void*)&c_ReflectionFunctionAbstract::ifa_getname, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_isinternal((void*)&c_ReflectionFunctionAbstract::i_isinternal, (void*)&c_ReflectionFunctionAbstract::ifa_isinternal, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_getendline((void*)&c_ReflectionFunctionAbstract::i_getendline, (void*)&c_ReflectionFunctionAbstract::ifa_getendline, 0, 4, 0x0000000000000000LL);
Variant c_ReflectionFunctionAbstract::i_getname(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getname);
}
Variant c_ReflectionFunctionAbstract::i_isinternal(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isinternal);
}
Variant c_ReflectionFunctionAbstract::i_getclosure(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getclosure);
}
Variant c_ReflectionFunctionAbstract::i_isuserdefined(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isuserdefined);
}
Variant c_ReflectionFunctionAbstract::i_getfilename(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getfilename);
}
Variant c_ReflectionFunctionAbstract::i_getstartline(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getstartline);
}
Variant c_ReflectionFunctionAbstract::i_getendline(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getendline);
}
Variant c_ReflectionFunctionAbstract::i_getdoccomment(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getdoccomment);
}
Variant c_ReflectionFunctionAbstract::i_getstaticvariables(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getstaticvariables);
}
Variant c_ReflectionFunctionAbstract::i_returnsreference(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_returnsreference);
}
Variant c_ReflectionFunctionAbstract::i_getparameters(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getparameters);
}
Variant c_ReflectionFunctionAbstract::i_getnumberofparameters(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getnumberofparameters);
}
Variant c_ReflectionFunctionAbstract::i_getnumberofrequiredparameters(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getnumberofrequiredparameters);
}
Variant c_ReflectionFunctionAbstract::ifa_getname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getname, coo_ReflectionFunctionAbstract);
  }
  c_ReflectionFunctionAbstract *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionFunctionAbstract*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
  return (self->t_getname());
}
Variant c_ReflectionFunctionAbstract::ifa_isinternal(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isinternal, coo_ReflectionFunctionAbstract);
  }
  c_ReflectionFunctionAbstract *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionFunctionAbstract*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
  return (self->t_isinternal());
}
Variant c_ReflectionFunctionAbstract::ifa_getclosure(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getclosure, coo_ReflectionFunctionAbstract);
  }
  c_ReflectionFunctionAbstract *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionFunctionAbstract*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionFunctionAbstract::getClosure", 0, 1);
  return (self->t_getclosure());
}
Variant c_ReflectionFunctionAbstract::ifa_isuserdefined(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isuserdefined, coo_ReflectionFunctionAbstract);
  }
  c_ReflectionFunctionAbstract *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionFunctionAbstract*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
  return (self->t_isuserdefined());
}
Variant c_ReflectionFunctionAbstract::ifa_getfilename(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getfilename, coo_ReflectionFunctionAbstract);
  }
  c_ReflectionFunctionAbstract *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionFunctionAbstract*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
  return (self->t_getfilename());
}
Variant c_ReflectionFunctionAbstract::ifa_getstartline(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getstartline, coo_ReflectionFunctionAbstract);
  }
  c_ReflectionFunctionAbstract *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionFunctionAbstract*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
  return (self->t_getstartline());
}
Variant c_ReflectionFunctionAbstract::ifa_getendline(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getendline, coo_ReflectionFunctionAbstract);
  }
  c_ReflectionFunctionAbstract *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionFunctionAbstract*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
  return (self->t_getendline());
}
Variant c_ReflectionFunctionAbstract::ifa_getdoccomment(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getdoccomment, coo_ReflectionFunctionAbstract);
  }
  c_ReflectionFunctionAbstract *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionFunctionAbstract*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
  return (self->t_getdoccomment());
}
Variant c_ReflectionFunctionAbstract::ifa_getstaticvariables(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getstaticvariables, coo_ReflectionFunctionAbstract);
  }
  c_ReflectionFunctionAbstract *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionFunctionAbstract*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
  return (self->t_getstaticvariables());
}
Variant c_ReflectionFunctionAbstract::ifa_returnsreference(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_returnsreference, coo_ReflectionFunctionAbstract);
  }
  c_ReflectionFunctionAbstract *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionFunctionAbstract*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
  return (self->t_returnsreference());
}
Variant c_ReflectionFunctionAbstract::ifa_getparameters(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getparameters, coo_ReflectionFunctionAbstract);
  }
  c_ReflectionFunctionAbstract *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionFunctionAbstract*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
  return (self->t_getparameters());
}
Variant c_ReflectionFunctionAbstract::ifa_getnumberofparameters(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getnumberofparameters, coo_ReflectionFunctionAbstract);
  }
  c_ReflectionFunctionAbstract *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionFunctionAbstract*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
  return (self->t_getnumberofparameters());
}
Variant c_ReflectionFunctionAbstract::ifa_getnumberofrequiredparameters(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getnumberofrequiredparameters, coo_ReflectionFunctionAbstract);
  }
  c_ReflectionFunctionAbstract *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionFunctionAbstract*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
  return (self->t_getnumberofrequiredparameters());
}
const MethodCallInfoTable c_ReflectionFunctionAbstract::s_call_info_table[] = {
  { 0x57D8DC34C9A03560LL, 1, 21, "getNumberOfParameters", &c_ReflectionFunctionAbstract::ci_getnumberofparameters },
  { 0x4D637DECDBFA6221LL, 1, 29, "getNumberOfRequiredParameters", &c_ReflectionFunctionAbstract::ci_getnumberofrequiredparameters },
  { 0x33A6C2CFBDB05EE2LL, 1, 10, "getClosure", &c_ReflectionFunctionAbstract::ci_getclosure },
  { 0x6A6B8BECAE7D4164LL, 1, 13, "isUserDefined", &c_ReflectionFunctionAbstract::ci_isuserdefined },
  { 0x39C1BB731CB1CB04LL, 0, 12, "getStartLine", &c_ReflectionFunctionAbstract::ci_getstartline },
  { 0x23F51CDECC198965LL, 1, 7, "getName", &c_ReflectionFunctionAbstract::ci_getname },
  { 0x37FFB8F44A3329A8LL, 1, 18, "getStaticVariables", &c_ReflectionFunctionAbstract::ci_getstaticvariables },
  { 0x1A3AB3B0276D2668LL, 0, 16, "returnsReference", &c_ReflectionFunctionAbstract::ci_returnsreference },
  { 0x1930CE336D39474DLL, 1, 11, "getFileName", &c_ReflectionFunctionAbstract::ci_getfilename },
  { 0x3E62225132C2A32DLL, 0, 13, "getParameters", &c_ReflectionFunctionAbstract::ci_getparameters },
  { 0x48FDF6C5835C64CFLL, 1, 10, "isInternal", &c_ReflectionFunctionAbstract::ci_isinternal },
  { 0x6C19E85007BC4570LL, 1, 10, "getEndLine", &c_ReflectionFunctionAbstract::ci_getendline },
  { 0x7C4F424FDA56ADF8LL, 1, 13, "getDocComment", &c_ReflectionFunctionAbstract::ci_getdoccomment },
  { 0, 1, 0, 0 }
};
const int c_ReflectionFunctionAbstract::s_call_info_index[] = {
  31,
  0,1,2,-1,3,5,-1,-1,
  6,-1,-1,-1,-1,8,-1,10,
  11,-1,-1,-1,-1,-1,-1,-1,
  12,-1,-1,-1,-1,-1,-1,-1,

};
const ObjectStaticCallbacks cw_ReflectionFunctionAbstract = {
  (ObjectData*(*)(ObjectData*))coo_ReflectionFunctionAbstract,
  c_ReflectionFunctionAbstract::s_call_info_table,c_ReflectionFunctionAbstract::s_call_info_index,
  c_ReflectionFunctionAbstract::s_instanceof_table,c_ReflectionFunctionAbstract::s_instanceof_index,
  &c_ReflectionFunctionAbstract::s_class_name,
  &c_ReflectionFunctionAbstract::os_prop_table,0,0,0,0x0
};
/* SRC: classes/reflection.php line 261 */
Variant c_ReflectionFunctionAbstract::t_getname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getName);
  return m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 276 */
Variant c_ReflectionFunctionAbstract::t_isinternal() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::isInternal);
  return m_info.rvalAt(NAMSTR(s_sys_ss9332a8ac, "internal"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 280 */
Variant c_ReflectionFunctionAbstract::t_getclosure() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getClosure);
  return m_info.rvalAt(NAMSTR(s_sys_ss4cd61020, "closure"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 295 */
bool c_ReflectionFunctionAbstract::t_isuserdefined() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::isUserDefined);
  return !(toBoolean(m_info.rvalAt(NAMSTR(s_sys_ss9332a8ac, "internal"), AccessFlags::Error_Key)));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 309 */
Variant c_ReflectionFunctionAbstract::t_getfilename() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getFileName);
  return m_info.rvalAt(NAMSTR(s_sys_ss8ce7db5b, "file"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 323 */
Variant c_ReflectionFunctionAbstract::t_getstartline() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getStartLine);
  return m_info.rvalAt(NAMSTR(s_sys_ssd4c67725, "line1"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 338 */
Variant c_ReflectionFunctionAbstract::t_getendline() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getEndLine);
  return m_info.rvalAt(NAMSTR(s_sys_ssbefe32a8, "line2"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 352 */
Variant c_ReflectionFunctionAbstract::t_getdoccomment() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getDocComment);
  return m_info.rvalAt(NAMSTR(s_sys_ss9cfa17a6, "doc"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 367 */
Variant c_ReflectionFunctionAbstract::t_getstaticvariables() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getStaticVariables);
  return m_info.rvalAt(NAMSTR(s_sys_ss5be7a94a, "static_variables"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 382 */
Variant c_ReflectionFunctionAbstract::t_returnsreference() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::returnsReference);
  return m_info.rvalAt(NAMSTR(s_sys_ss134fd5fa, "ref"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 397 */
Array c_ReflectionFunctionAbstract::t_getparameters() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getParameters);
  Array v_ret;
  Primitive v_name = 0;
  Variant v_info;
  p_ReflectionParameter v_param;

  v_ret = s_sys_sa00000000;
  {
    LOOP_COUNTER(1);
    Variant map2 = m_info.rvalAt(NAMSTR(s_sys_ss1f20ac62, "params"), AccessFlags::Error_Key);
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v_info);
      v_name.assignVal(iter3.first());
      {
        {
          const p_ReflectionParameter &tmp0((p_ReflectionParameter(((c_ReflectionParameter*)coo_ReflectionParameter())->create(null, null))));
          v_param = tmp0;
        }
        v_param->m_info.assignVal(v_info);
        v_ret.append((VarNR(v_param)));
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 419 */
int c_ReflectionFunctionAbstract::t_getnumberofparameters() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getNumberOfParameters);
  {
    const Variant &tmp0((m_info.rvalAt(NAMSTR(s_sys_ss1f20ac62, "params"), AccessFlags::Error_Key)));
    return x_count(tmp0);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 435 */
int64 c_ReflectionFunctionAbstract::t_getnumberofrequiredparameters() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getNumberOfRequiredParameters);
  int64 v_count = 0;
  Array v_params;
  Primitive v_name = 0;
  Variant v_param;

  v_count = 0LL;
  {
    const Array &tmp0((t_getparameters()));
    v_params = tmp0;
  }
  {
    LOOP_COUNTER(1);
    for (ArrayIter iter3 = v_params.begin(s_class_name, true); !iter3.end(); ++iter3) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v_param);
      v_name.assignVal(iter3.first());
      {
        {
          bool tmp0;
          {
            MethodCallPackage mcp1;
            CVarRef obj1 = v_param;
            mcp1.methodCall((obj1), NAMSTR(s_sys_ss6d9ef7e5, "isOptional"), 0x2D6EF48BBAB22735LL);
            const CallInfo *cit1 ATTRIBUTE_UNUSED = mcp1.ci;
            tmp0 = (toBoolean((mcp1.bindClass(fi)->getMeth0Args())(mcp1, 0)));
          }
          if (tmp0) {
            {
              break;
            }
          }
        }
        v_count++;
      }
    }
  }
  return v_count;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 27 */
IMPLEMENT_CLASS_NO_DEFAULT_SWEEP(ReflectionException)
const InstanceOfInfo c_ReflectionException::s_instanceof_table[] = {
  {0x672AD818DDE95538LL,0,"ReflectionException",&cw_ReflectionException},
  {0x47D93E6F80B66A94LL,1,"Exception",&cw_Exception},
};
const int c_ReflectionException::s_instanceof_index[] = {
  3,
  0,-1,-1,-1,
};
const ObjectStaticCallbacks cw_ReflectionException = {
  (ObjectData*(*)(ObjectData*))coo_ReflectionException,
  c_ReflectionException::s_call_info_table,c_ReflectionException::s_call_info_index,
  c_ReflectionException::s_instanceof_table,c_ReflectionException::s_instanceof_index,
  &c_ReflectionException::s_class_name,
  &c_Exception::os_prop_table,&c_Exception::ci___construct,0,&cw_Exception,0x0
};
/* SRC: classes/reflection.php line 1317 */
IMPLEMENT_CLASS_NO_DEFAULT_SWEEP(ReflectionObject)
const InstanceOfInfo c_ReflectionObject::s_instanceof_table[] = {
  {0x41A9F7D81254DD7ALL,1,"ReflectionObject",&cw_ReflectionObject},
  {0x35A44A5E6AE2E71DLL,0,"ReflectionClass",&cw_ReflectionClass},
  {0x62F7F85447C0A605LL,1,"Reflector",(const ObjectStaticCallbacks*)2},
};
const int c_ReflectionObject::s_instanceof_index[] = {
  7,
  -1,-1,0,-1,-1,1,-1,-1,

};
CallInfo c_ReflectionObject::ci_hasproperty((void*)&c_ReflectionObject::i_hasproperty, (void*)&c_ReflectionObject::ifa_hasproperty, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionObject::ci_export((void*)&c_ReflectionObject::i_export, (void*)&c_ReflectionObject::ifa_export, 2, 12, 0x0000000000000000LL);
CallInfo c_ReflectionObject::ci___construct((void*)&c_ReflectionObject::i___construct, (void*)&c_ReflectionObject::ifa___construct, 1, 4, 0x0000000000000000LL);
Variant c_ReflectionObject::i___construct(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa___construct);
}
Variant c_ReflectionObject::i_hasproperty(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_hasproperty);
}
Variant c_ReflectionObject::i_export(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_export);
}
Variant c_ReflectionObject::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_ReflectionObject);
  }
  c_ReflectionObject *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionObject*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ReflectionObject::__construct", count, 1, 1, 2);
  CVarRef arg0(a0);
  return (self->t___construct(arg0), null);
}
Variant c_ReflectionObject::ifa_hasproperty(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_hasproperty, coo_ReflectionObject);
  }
  c_ReflectionObject *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionObject*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ReflectionObject::hasProperty", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_hasproperty(arg0));
}
Variant c_ReflectionObject::ifa_export(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ReflectionObject::export", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (c_ReflectionObject::t_export(arg0, arg1));
}
const MethodCallInfoTable c_ReflectionObject::s_call_info_table[] = {
  { 0x0B5ABC58C98E70E8LL, 1, 6, "export", &c_ReflectionObject::ci_export },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_ReflectionObject::ci___construct },
  { 0x40C7B30DCB439C8FLL, 0, 11, "hasProperty", &c_ReflectionObject::ci_hasproperty },
  { 0, 1, 0, 0 }
};
const int c_ReflectionObject::s_call_info_index[] = {
  7,
  0,-1,-1,-1,-1,-1,-1,1,

};
c_ReflectionObject *c_ReflectionObject::create(CVarRef v_obj) {
  CountableHelper h(this);
  init();
  t___construct(v_obj);
  return this;
}
const ObjectStaticCallbacks cw_ReflectionObject = {
  (ObjectData*(*)(ObjectData*))coo_ReflectionObject,
  c_ReflectionObject::s_call_info_table,c_ReflectionObject::s_call_info_index,
  c_ReflectionObject::s_instanceof_table,c_ReflectionObject::s_instanceof_index,
  &c_ReflectionObject::s_class_name,
  &c_ReflectionObject::os_prop_table,&c_ReflectionObject::ci___construct,0,&cw_ReflectionClass,0x0
};
/* SRC: classes/reflection.php line 1319 */
void c_ReflectionObject::t___construct(Variant v_obj) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionObject, ReflectionObject::__construct);
  bool oldInCtor = gasInCtor(true);
  m_obj.assignVal(v_obj);
  c_ReflectionClass::t___construct(v_obj);
  gasInCtor(oldInCtor);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1324 */
bool c_ReflectionObject::t_hasproperty(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionObject, ReflectionObject::hasProperty);
  if (equal(m_name, NAMSTR(s_sys_ssf2885abf, "SimpleXMLElement"))) {
    {
      return m_obj.o_isset(toString(v_name));
    }
  }
  return c_ReflectionClass::t_hasproperty(v_name);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1346 */
Variant c_ReflectionObject::t_export(Variant v_obj, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionObject, ReflectionObject::export);
  String v_str;

  {
    p_ReflectionObject tmp0 = coo_ReflectionObject();
    ((c_ReflectionObject*)tmp0.get()->create(v_obj));
    v_obj = tmp0;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 538 */
const int64 q_ReflectionClass$$IS_IMPLICIT_ABSTRACT = 16LL;
const int64 q_ReflectionClass$$IS_EXPLICIT_ABSTRACT = 32LL;
const int64 q_ReflectionClass$$IS_FINAL = 64LL;
IMPLEMENT_CLASS_NO_DEFAULT_SWEEP(ReflectionClass)
const InstanceOfInfo c_ReflectionClass::s_instanceof_table[] = {
  {0x35A44A5E6AE2E71DLL,0,"ReflectionClass",&cw_ReflectionClass},
  {0x62F7F85447C0A605LL,1,"Reflector",(const ObjectStaticCallbacks*)2},
};
const int c_ReflectionClass::s_instanceof_index[] = {
  3,
  -1,0,-1,-1,
};
CallInfo c_ReflectionClass::ci_getdefaultproperties((void*)&c_ReflectionClass::i_getdefaultproperties, (void*)&c_ReflectionClass::ifa_getdefaultproperties, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getstaticpropertyvalue((void*)&c_ReflectionClass::i_getstaticpropertyvalue, (void*)&c_ReflectionClass::ifa_getstaticpropertyvalue, 2, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_isabstract((void*)&c_ReflectionClass::i_isabstract, (void*)&c_ReflectionClass::ifa_isabstract, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_gettraitaliases((void*)&c_ReflectionClass::i_gettraitaliases, (void*)&c_ReflectionClass::ifa_gettraitaliases, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_fetch((void*)&c_ReflectionClass::i_fetch, (void*)&c_ReflectionClass::ifa_fetch, 1, 132, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_gettraitnames((void*)&c_ReflectionClass::i_gettraitnames, (void*)&c_ReflectionClass::ifa_gettraitnames, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getinterfacenames((void*)&c_ReflectionClass::i_getinterfacenames, (void*)&c_ReflectionClass::ifa_getinterfacenames, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_isuserdefined((void*)&c_ReflectionClass::i_isuserdefined, (void*)&c_ReflectionClass::ifa_isuserdefined, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getstartline((void*)&c_ReflectionClass::i_getstartline, (void*)&c_ReflectionClass::ifa_getstartline, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getproperty((void*)&c_ReflectionClass::i_getproperty, (void*)&c_ReflectionClass::ifa_getproperty, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getextensionname((void*)&c_ReflectionClass::i_getextensionname, (void*)&c_ReflectionClass::ifa_getextensionname, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_test((void*)&c_ReflectionClass::i_test, (void*)&c_ReflectionClass::ifa_test, 2, 132, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_gettraits((void*)&c_ReflectionClass::i_gettraits, (void*)&c_ReflectionClass::ifa_gettraits, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getmethods((void*)&c_ReflectionClass::i_getmethods, (void*)&c_ReflectionClass::ifa_getmethods, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getconstants((void*)&c_ReflectionClass::i_getconstants, (void*)&c_ReflectionClass::ifa_getconstants, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_isfinal((void*)&c_ReflectionClass::i_isfinal, (void*)&c_ReflectionClass::ifa_isfinal, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getname((void*)&c_ReflectionClass::i_getname, (void*)&c_ReflectionClass::ifa_getname, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getmethod((void*)&c_ReflectionClass::i_getmethod, (void*)&c_ReflectionClass::ifa_getmethod, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getinterfaces((void*)&c_ReflectionClass::i_getinterfaces, (void*)&c_ReflectionClass::ifa_getinterfaces, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getdoccomment((void*)&c_ReflectionClass::i_getdoccomment, (void*)&c_ReflectionClass::ifa_getdoccomment, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_isiterateable((void*)&c_ReflectionClass::i_isiterateable, (void*)&c_ReflectionClass::ifa_isiterateable, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_newinstanceargs((void*)&c_ReflectionClass::i_newinstanceargs, (void*)&c_ReflectionClass::ifa_newinstanceargs, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_isinternal((void*)&c_ReflectionClass::i_isinternal, (void*)&c_ReflectionClass::ifa_isinternal, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_export((void*)&c_ReflectionClass::i_export, (void*)&c_ReflectionClass::ifa_export, 2, 12, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_isinstantiable((void*)&c_ReflectionClass::i_isinstantiable, (void*)&c_ReflectionClass::ifa_isinstantiable, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_hasmethod((void*)&c_ReflectionClass::i_hasmethod, (void*)&c_ReflectionClass::ifa_hasmethod, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_hasproperty((void*)&c_ReflectionClass::i_hasproperty, (void*)&c_ReflectionClass::ifa_hasproperty, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_isinterface((void*)&c_ReflectionClass::i_isinterface, (void*)&c_ReflectionClass::ifa_isinterface, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getconstant((void*)&c_ReflectionClass::i_getconstant, (void*)&c_ReflectionClass::ifa_getconstant, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getextension((void*)&c_ReflectionClass::i_getextension, (void*)&c_ReflectionClass::ifa_getextension, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci___tostring((void*)&c_ReflectionClass::i___tostring, (void*)&c_ReflectionClass::ifa___tostring, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_setstaticpropertyvalue((void*)&c_ReflectionClass::i_setstaticpropertyvalue, (void*)&c_ReflectionClass::ifa_setstaticpropertyvalue, 2, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_newinstance((void*)&c_ReflectionClass::i_newinstance, (void*)&c_ReflectionClass::ifa_newinstance, 0, 5, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_istrait((void*)&c_ReflectionClass::i_istrait, (void*)&c_ReflectionClass::ifa_istrait, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getfilename((void*)&c_ReflectionClass::i_getfilename, (void*)&c_ReflectionClass::ifa_getfilename, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getproperties((void*)&c_ReflectionClass::i_getproperties, (void*)&c_ReflectionClass::ifa_getproperties, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_implementsinterface((void*)&c_ReflectionClass::i_implementsinterface, (void*)&c_ReflectionClass::ifa_implementsinterface, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_isinstance((void*)&c_ReflectionClass::i_isinstance, (void*)&c_ReflectionClass::ifa_isinstance, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getmodifiers((void*)&c_ReflectionClass::i_getmodifiers, (void*)&c_ReflectionClass::ifa_getmodifiers, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getparentclass((void*)&c_ReflectionClass::i_getparentclass, (void*)&c_ReflectionClass::ifa_getparentclass, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getconstructor((void*)&c_ReflectionClass::i_getconstructor, (void*)&c_ReflectionClass::ifa_getconstructor, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getendline((void*)&c_ReflectionClass::i_getendline, (void*)&c_ReflectionClass::ifa_getendline, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_hasconstant((void*)&c_ReflectionClass::i_hasconstant, (void*)&c_ReflectionClass::ifa_hasconstant, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_issubclassof((void*)&c_ReflectionClass::i_issubclassof, (void*)&c_ReflectionClass::ifa_issubclassof, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci___construct((void*)&c_ReflectionClass::i___construct, (void*)&c_ReflectionClass::ifa___construct, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getstaticproperties((void*)&c_ReflectionClass::i_getstaticproperties, (void*)&c_ReflectionClass::ifa_getstaticproperties, 0, 4, 0x0000000000000000LL);
Variant c_ReflectionClass::i___construct(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa___construct);
}
Variant c_ReflectionClass::i_fetch(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_fetch);
}
Variant c_ReflectionClass::i_test(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_test);
}
Variant c_ReflectionClass::i___tostring(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa___tostring);
}
Variant c_ReflectionClass::i_export(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_export);
}
Variant c_ReflectionClass::i_getname(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getname);
}
Variant c_ReflectionClass::i_isinternal(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isinternal);
}
Variant c_ReflectionClass::i_isuserdefined(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isuserdefined);
}
Variant c_ReflectionClass::i_isinstantiable(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isinstantiable);
}
Variant c_ReflectionClass::i_hasconstant(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_hasconstant);
}
Variant c_ReflectionClass::i_hasmethod(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_hasmethod);
}
Variant c_ReflectionClass::i_hasproperty(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_hasproperty);
}
Variant c_ReflectionClass::i_getfilename(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getfilename);
}
Variant c_ReflectionClass::i_getstartline(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getstartline);
}
Variant c_ReflectionClass::i_getendline(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getendline);
}
Variant c_ReflectionClass::i_getdoccomment(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getdoccomment);
}
Variant c_ReflectionClass::i_getconstructor(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getconstructor);
}
Variant c_ReflectionClass::i_getmethod(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getmethod);
}
Variant c_ReflectionClass::i_getmethods(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getmethods);
}
Variant c_ReflectionClass::i_getproperty(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getproperty);
}
Variant c_ReflectionClass::i_getproperties(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getproperties);
}
Variant c_ReflectionClass::i_getconstants(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getconstants);
}
Variant c_ReflectionClass::i_getconstant(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getconstant);
}
Variant c_ReflectionClass::i_getinterfaces(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getinterfaces);
}
Variant c_ReflectionClass::i_gettraits(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_gettraits);
}
Variant c_ReflectionClass::i_getinterfacenames(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getinterfacenames);
}
Variant c_ReflectionClass::i_gettraitnames(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_gettraitnames);
}
Variant c_ReflectionClass::i_gettraitaliases(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_gettraitaliases);
}
Variant c_ReflectionClass::i_isinterface(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isinterface);
}
Variant c_ReflectionClass::i_isabstract(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isabstract);
}
Variant c_ReflectionClass::i_isfinal(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isfinal);
}
Variant c_ReflectionClass::i_istrait(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_istrait);
}
Variant c_ReflectionClass::i_getmodifiers(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getmodifiers);
}
Variant c_ReflectionClass::i_isinstance(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isinstance);
}
Variant c_ReflectionClass::i_newinstance(MethodCallPackage &mcp, CArrRef params) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::i_dummy(mcp, params, i_newinstance, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  int count ATTRIBUTE_UNUSED = params.size();
  const Array &p(count > 0 ? ArrayUtil::EnsureIntKeys(params) : Array());
  return (self->t_newinstance(count, p));
}
Variant c_ReflectionClass::i_newinstanceargs(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_newinstanceargs);
}
Variant c_ReflectionClass::i_getparentclass(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getparentclass);
}
Variant c_ReflectionClass::i_issubclassof(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_issubclassof);
}
Variant c_ReflectionClass::i_getstaticproperties(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getstaticproperties);
}
Variant c_ReflectionClass::i_getstaticpropertyvalue(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getstaticpropertyvalue);
}
Variant c_ReflectionClass::i_setstaticpropertyvalue(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_setstaticpropertyvalue);
}
Variant c_ReflectionClass::i_getdefaultproperties(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getdefaultproperties);
}
Variant c_ReflectionClass::i_isiterateable(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_isiterateable);
}
Variant c_ReflectionClass::i_implementsinterface(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_implementsinterface);
}
Variant c_ReflectionClass::i_getextension(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getextension);
}
Variant c_ReflectionClass::i_getextensionname(MethodCallPackage &mcp, CArrRef params) {
  return invoke_meth_few_handler(mcp, params, &ifa_getextensionname);
}
Variant c_ReflectionClass::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___construct, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 2);
  CVarRef arg0(a0);
  return (self->t___construct(arg0), null);
}
Variant c_ReflectionClass::ifa_fetch(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_fetch, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ReflectionClass::fetch", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_fetch(arg0));
}
Variant c_ReflectionClass::ifa_test(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_test, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ReflectionClass::test", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_test(arg0, arg1));
}
Variant c_ReflectionClass::ifa___tostring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa___tostring, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_ReflectionClass::ifa_export(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ReflectionClass::export", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (c_ReflectionClass::t_export(arg0, arg1));
}
Variant c_ReflectionClass::ifa_getname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getname, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::getName", 0, 1);
  return (self->t_getname());
}
Variant c_ReflectionClass::ifa_isinternal(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isinternal, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::isInternal", 0, 1);
  return (self->t_isinternal());
}
Variant c_ReflectionClass::ifa_isuserdefined(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isuserdefined, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::isUserDefined", 0, 1);
  return (self->t_isuserdefined());
}
Variant c_ReflectionClass::ifa_isinstantiable(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isinstantiable, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::isInstantiable", 0, 1);
  return (self->t_isinstantiable());
}
Variant c_ReflectionClass::ifa_hasconstant(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_hasconstant, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ReflectionClass::hasConstant", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_hasconstant(arg0));
}
Variant c_ReflectionClass::ifa_hasmethod(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_hasmethod, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ReflectionClass::hasMethod", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_hasmethod(arg0));
}
Variant c_ReflectionClass::ifa_hasproperty(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_hasproperty, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ReflectionClass::hasProperty", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_hasproperty(arg0));
}
Variant c_ReflectionClass::ifa_getfilename(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getfilename, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::getFileName", 0, 1);
  return (self->t_getfilename());
}
Variant c_ReflectionClass::ifa_getstartline(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getstartline, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::getStartLine", 0, 1);
  return (self->t_getstartline());
}
Variant c_ReflectionClass::ifa_getendline(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getendline, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::getEndLine", 0, 1);
  return (self->t_getendline());
}
Variant c_ReflectionClass::ifa_getdoccomment(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getdoccomment, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::getDocComment", 0, 1);
  return (self->t_getdoccomment());
}
Variant c_ReflectionClass::ifa_getconstructor(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getconstructor, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::getConstructor", 0, 1);
  return (self->t_getconstructor());
}
Variant c_ReflectionClass::ifa_getmethod(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getmethod, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ReflectionClass::getMethod", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getmethod(arg0));
}
Variant c_ReflectionClass::ifa_getmethods(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getmethods, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("ReflectionClass::getMethods", 1, 1);
  if (count <= 0) return (self->t_getmethods());
  CVarRef arg0(a0);
  return (self->t_getmethods(arg0));
}
Variant c_ReflectionClass::ifa_getproperty(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getproperty, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ReflectionClass::getProperty", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getproperty(arg0));
}
Variant c_ReflectionClass::ifa_getproperties(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getproperties, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 1)) return throw_toomany_arguments("ReflectionClass::getProperties", 1, 1);
  if (count <= 0) return (self->t_getproperties());
  CVarRef arg0(a0);
  return (self->t_getproperties(arg0));
}
Variant c_ReflectionClass::ifa_getconstants(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getconstants, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::getConstants", 0, 1);
  return (self->t_getconstants());
}
Variant c_ReflectionClass::ifa_getconstant(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getconstant, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ReflectionClass::getConstant", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_getconstant(arg0));
}
Variant c_ReflectionClass::ifa_getinterfaces(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getinterfaces, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::getInterfaces", 0, 1);
  return (self->t_getinterfaces());
}
Variant c_ReflectionClass::ifa_gettraits(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_gettraits, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::getTraits", 0, 1);
  return (self->t_gettraits());
}
Variant c_ReflectionClass::ifa_getinterfacenames(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getinterfacenames, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::getInterfaceNames", 0, 1);
  return (self->t_getinterfacenames());
}
Variant c_ReflectionClass::ifa_gettraitnames(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_gettraitnames, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::getTraitNames", 0, 1);
  return (self->t_gettraitnames());
}
Variant c_ReflectionClass::ifa_gettraitaliases(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_gettraitaliases, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::getTraitAliases", 0, 1);
  return (self->t_gettraitaliases());
}
Variant c_ReflectionClass::ifa_isinterface(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isinterface, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::isInterface", 0, 1);
  return (self->t_isinterface());
}
Variant c_ReflectionClass::ifa_isabstract(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isabstract, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::isAbstract", 0, 1);
  return (self->t_isabstract());
}
Variant c_ReflectionClass::ifa_isfinal(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isfinal, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::isFinal", 0, 1);
  return (self->t_isfinal());
}
Variant c_ReflectionClass::ifa_istrait(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_istrait, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::isTrait", 0, 1);
  return (self->t_istrait());
}
Variant c_ReflectionClass::ifa_getmodifiers(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getmodifiers, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::getModifiers", 0, 1);
  return (self->t_getmodifiers());
}
Variant c_ReflectionClass::ifa_isinstance(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isinstance, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ReflectionClass::isInstance", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_isinstance(arg0));
}
Variant c_ReflectionClass::ifa_newinstance(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_newinstance, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  Array p;
  if (count >= 1) p.append(a0);
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (self->t_newinstance(count, p));
}
Variant c_ReflectionClass::ifa_newinstanceargs(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_newinstanceargs, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ReflectionClass::newInstanceArgs", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_newinstanceargs(arg0));
}
Variant c_ReflectionClass::ifa_getparentclass(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getparentclass, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::getParentClass", 0, 1);
  return (self->t_getparentclass());
}
Variant c_ReflectionClass::ifa_issubclassof(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_issubclassof, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ReflectionClass::isSubclassOf", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_issubclassof(arg0));
}
Variant c_ReflectionClass::ifa_getstaticproperties(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getstaticproperties, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::getStaticProperties", 0, 1);
  return (self->t_getstaticproperties());
}
Variant c_ReflectionClass::ifa_getstaticpropertyvalue(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getstaticpropertyvalue, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count < 1 || count > 2)) return throw_wrong_arguments("ReflectionClass::getStaticPropertyValue", count, 1, 2, 1);
  CVarRef arg0(a0);
  if (count <= 1) return (self->t_getstaticpropertyvalue(arg0));
  CVarRef arg1(a1);
  return (self->t_getstaticpropertyvalue(arg0, arg1));
}
Variant c_ReflectionClass::ifa_setstaticpropertyvalue(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_setstaticpropertyvalue, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count != 2)) return throw_wrong_arguments("ReflectionClass::setStaticPropertyValue", count, 2, 2, 1);
  CVarRef arg0(a0);
  CVarRef arg1(a1);
  return (self->t_setstaticpropertyvalue(arg0, arg1), null);
}
Variant c_ReflectionClass::ifa_getdefaultproperties(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getdefaultproperties, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::getDefaultProperties", 0, 1);
  return (self->t_getdefaultproperties());
}
Variant c_ReflectionClass::ifa_isiterateable(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_isiterateable, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::isIterateable", 0, 1);
  return (self->t_isiterateable());
}
Variant c_ReflectionClass::ifa_implementsinterface(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_implementsinterface, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count != 1)) return throw_wrong_arguments("ReflectionClass::implementsInterface", count, 1, 1, 1);
  CVarRef arg0(a0);
  return (self->t_implementsinterface(arg0));
}
Variant c_ReflectionClass::ifa_getextension(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getextension, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::getExtension", 0, 1);
  return (self->t_getextension());
}
Variant c_ReflectionClass::ifa_getextensionname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (UNLIKELY(mcp.obj == 0)) {
    return ObjectData::ifa_dummy(mcp, count, INVOKE_FEW_ARGS_PASS_ARGS, ifa_getextensionname, coo_ReflectionClass);
  }
  c_ReflectionClass *self ATTRIBUTE_UNUSED (static_cast<c_ReflectionClass*>(mcp.obj));
  if (UNLIKELY(count > 0)) return throw_toomany_arguments("ReflectionClass::getExtensionName", 0, 1);
  return (self->t_getextensionname());
}
const MethodCallInfoTable c_ReflectionClass::s_call_info_table[] = {
  { 0x39C1BB731CB1CB04LL, 1, 12, "getStartLine", &c_ReflectionClass::ci_getstartline },
  { 0x4C40EED171E86607LL, 1, 9, "getTraits", &c_ReflectionClass::ci_gettraits },
  { 0x40C7B30DCB439C8FLL, 1, 11, "hasProperty", &c_ReflectionClass::ci_hasproperty },
  { 0x642C2D2994B34A13LL, 1, 10, "__toString", &c_ReflectionClass::ci___tostring },
  { 0x24253EBA491D6014LL, 1, 12, "getModifiers", &c_ReflectionClass::ci_getmodifiers },
  { 0x196F2AC52B12BF16LL, 1, 15, "getTraitAliases", &c_ReflectionClass::ci_gettraitaliases },
  { 0x21820E7AA4733998LL, 1, 9, "hasMethod", &c_ReflectionClass::ci_hasmethod },
  { 0x0F1AD0A8EC4C229BLL, 1, 20, "getDefaultProperties", &c_ReflectionClass::ci_getdefaultproperties },
  { 0x1BC5F3D87676509ELL, 1, 11, "isInterface", &c_ReflectionClass::ci_isinterface },
  { 0x323D9BCB05797B22LL, 1, 19, "getStaticProperties", &c_ReflectionClass::ci_getstaticproperties },
  { 0x779C6BB1877464A7LL, 1, 13, "getTraitNames", &c_ReflectionClass::ci_gettraitnames },
  { 0x030CE1D6142F8C29LL, 1, 10, "isInstance", &c_ReflectionClass::ci_isinstance },
  { 0x1D6B8CA358B49929LL, 0, 16, "getExtensionName", &c_ReflectionClass::ci_getextensionname },
  { 0x226F6E80CECD3CAALL, 1, 14, "getConstructor", &c_ReflectionClass::ci_getconstructor },
  { 0x16BA16CE6488AAAALL, 0, 10, "getMethods", &c_ReflectionClass::ci_getmethods },
  { 0x24596BE6D21F7CAALL, 0, 17, "getInterfaceNames", &c_ReflectionClass::ci_getinterfacenames },
  { 0x06FB6A7DC3D795AELL, 1, 7, "isFinal", &c_ReflectionClass::ci_isfinal },
  { 0x3C882D4A895F612ELL, 0, 22, "getStaticPropertyValue", &c_ReflectionClass::ci_getstaticpropertyvalue },
  { 0x30A86FCA01FE7030LL, 1, 11, "newInstance", &c_ReflectionClass::ci_newinstance },
  { 0x3DB53E1FBD3C0734LL, 1, 11, "getConstant", &c_ReflectionClass::ci_getconstant },
  { 0x0D81ECE253A3B5B6LL, 1, 9, "getMethod", &c_ReflectionClass::ci_getmethod },
  { 0x7460D945DA32FDB7LL, 1, 10, "isAbstract", &c_ReflectionClass::ci_isabstract },
  { 0x638089893524223BLL, 1, 7, "isTrait", &c_ReflectionClass::ci_istrait },
  { 0x25D24435915E6E3BLL, 0, 12, "getExtension", &c_ReflectionClass::ci_getextension },
  { 0x0D8AAD6BA2BBCD3CLL, 1, 14, "isInstantiable", &c_ReflectionClass::ci_isinstantiable },
  { 0x54C2DC04C4A62B3FLL, 1, 11, "hasConstant", &c_ReflectionClass::ci_hasconstant },
  { 0x67C15E3D98C00B43LL, 1, 13, "getInterfaces", &c_ReflectionClass::ci_getinterfaces },
  { 0x1EB679C3602F4B44LL, 1, 13, "getProperties", &c_ReflectionClass::ci_getproperties },
  { 0x0FD73627FB023047LL, 1, 11, "getProperty", &c_ReflectionClass::ci_getproperty },
  { 0x1930CE336D39474DLL, 1, 11, "getFileName", &c_ReflectionClass::ci_getfilename },
  { 0x7D5A57B5370B68CELL, 1, 13, "isIterateable", &c_ReflectionClass::ci_isiterateable },
  { 0x48FDF6C5835C64CFLL, 1, 10, "isInternal", &c_ReflectionClass::ci_isinternal },
  { 0x1CC71CB013143955LL, 1, 12, "getConstants", &c_ReflectionClass::ci_getconstants },
  { 0x0D31D0AC229C615FLL, 1, 11, "__construct", &c_ReflectionClass::ci___construct },
  { 0x6A6B8BECAE7D4164LL, 1, 13, "isUserDefined", &c_ReflectionClass::ci_isuserdefined },
  { 0x23F51CDECC198965LL, 1, 7, "getName", &c_ReflectionClass::ci_getname },
  { 0x2735DCC254EE5C66LL, 1, 15, "newInstanceArgs", &c_ReflectionClass::ci_newinstanceargs },
  { 0x37349B25A0ED29E7LL, 1, 4, "test", &c_ReflectionClass::ci_test },
  { 0x0B5ABC58C98E70E8LL, 1, 6, "export", &c_ReflectionClass::ci_export },
  { 0x6C19E85007BC4570LL, 1, 10, "getEndLine", &c_ReflectionClass::ci_getendline },
  { 0x07ECA928E37717F1LL, 1, 22, "setStaticPropertyValue", &c_ReflectionClass::ci_setstaticpropertyvalue },
  { 0x74F7FEDE16957472LL, 1, 14, "getParentClass", &c_ReflectionClass::ci_getparentclass },
  { 0x7C4F424FDA56ADF8LL, 1, 13, "getDocComment", &c_ReflectionClass::ci_getdoccomment },
  { 0x5E82B850BB90B0FBLL, 1, 5, "fetch", &c_ReflectionClass::ci_fetch },
  { 0x28DC702215C7D6FBLL, 0, 19, "implementsInterface", &c_ReflectionClass::ci_implementsinterface },
  { 0x373333991926C97ELL, 1, 12, "isSubclassOf", &c_ReflectionClass::ci_issubclassof },
  { 0, 1, 0, 0 }
};
const int c_ReflectionClass::s_call_info_index[] = {
  127,
  -1,-1,-1,-1,0,-1,-1,1,
  -1,-1,-1,-1,-1,-1,-1,2,
  -1,-1,-1,3,4,-1,5,-1,
  6,-1,-1,7,-1,-1,8,-1,
  -1,-1,9,-1,-1,-1,-1,10,
  -1,11,13,-1,-1,-1,16,-1,
  18,-1,-1,-1,19,-1,20,21,
  -1,-1,-1,22,24,-1,-1,25,
  -1,-1,-1,26,27,-1,-1,28,
  -1,-1,-1,-1,-1,29,30,31,
  -1,-1,-1,-1,-1,32,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,33,
  -1,-1,-1,-1,34,35,36,37,
  38,-1,-1,-1,-1,-1,-1,-1,
  39,40,41,-1,-1,-1,-1,-1,
  42,-1,-1,43,-1,-1,45,-1,

};
c_ReflectionClass *c_ReflectionClass::create(CVarRef v_name) {
  CountableHelper h(this);
  init();
  t___construct(v_name);
  return this;
}
const ObjectStaticCallbacks cw_ReflectionClass = {
  (ObjectData*(*)(ObjectData*))coo_ReflectionClass,
  c_ReflectionClass::s_call_info_table,c_ReflectionClass::s_call_info_index,
  c_ReflectionClass::s_instanceof_table,c_ReflectionClass::s_instanceof_index,
  &c_ReflectionClass::s_class_name,
  &c_ReflectionClass::os_prop_table,&c_ReflectionClass::ci___construct,0,0,0x0
};
/* SRC: classes/reflection.php line 546 */
void c_ReflectionClass::t___construct(Variant v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::__construct);
  bool oldInCtor = gasInCtor(true);
  if (x_is_object(v_name)) {
    {
      {
        const Variant &tmp0((x_get_class(v_name)));
        v_name.assignVal(tmp0);
      }
    }
  }
  else {
    {
      if (((!(x_class_exists(toString(v_name))) && !(x_interface_exists(toString(v_name)))) && !(x_trait_exists(toString(v_name))))) {
        {
          {
            p_ReflectionException tmp0 = coo_ReflectionException();
            throw_exception(((c_ReflectionException*)tmp0.get()->create(concat3(NAMSTR(s_sys_ssa78ef7eb, "Class "), toString(v_name), NAMSTR(s_sys_ss5784ed2b, " does not exist"))), tmp0));
          }
        }
      }
    }
  }
  {
    const String &tmp0((x_hphp_get_original_class_name(toString(v_name))));
    m_name = tmp0;
  }
  gasInCtor(oldInCtor);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 560 */
Variant c_ReflectionClass::t_fetch(CVarRef v_what) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::fetch);
  Primitive v_interface = 0;
  Variant v__;
  p_ReflectionClass v_p;

  if (!(toBoolean(m_info))) {
    {
      {
        const Variant &tmp0((call_user_func1(NAMVAR(s_sys_svs7732a9a6, "hphp_get_class_info"), m_name)));
        m_info.assignVal(tmp0);
      }
      if (empty(m_info)) {
        {
          {
            p_ReflectionException tmp0 = coo_ReflectionException();
            throw_exception(((c_ReflectionException*)tmp0.get()->create(concat3(NAMSTR(s_sys_ssa78ef7eb, "Class "), toString(m_name), NAMSTR(s_sys_ss5784ed2b, " does not exist"))), tmp0));
          }
        }
      }
      {
        LOOP_COUNTER(1);
        Variant map2 = m_info.rvalAt(NAMSTR(s_sys_sscfb8e254, "interfaces"), AccessFlags::Error_Key);
        for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
          LOOP_COUNTER_CHECK(1);
          iter3.second(v__);
          v_interface.assignVal(iter3.first());
          {
            {
              p_ReflectionClass tmp0 = coo_ReflectionClass();
              ((c_ReflectionClass*)tmp0.get()->create(v_interface));
              v_p = tmp0;
            }
            {
              const Variant &tmp0((v_p->t_fetch(NAMVAR(s_sys_svs5b229ad5, "methods"))));
              m_info.setOpEqual(277, NAMSTR(s_sys_ss5b229ad5, "methods"), (tmp0), true);
            }
            {
              const Variant &tmp0((v_p->m_info.rvalAt(NAMSTR(s_sys_ss623ae369, "constants"), AccessFlags::Error_Key)));
              m_info.setOpEqual(277, NAMSTR(s_sys_ss623ae369, "constants"), (tmp0), true);
            }
            {
              const Variant &tmp0((v_p->m_info.rvalAt(NAMSTR(s_sys_sscfb8e254, "interfaces"), AccessFlags::Error_Key)));
              m_info.setOpEqual(277, NAMSTR(s_sys_sscfb8e254, "interfaces"), (tmp0), true);
            }
          }
        }
      }
      if (!(empty(m_info, NAMSTR(s_sys_ssfb10fd8c, "parent"), true))) {
        {
          {
            p_ReflectionClass tmp0 = coo_ReflectionClass();
            const Variant &tmp1((m_info.rvalAt(NAMSTR(s_sys_ssfb10fd8c, "parent"), AccessFlags::Error_Key)));
            ((c_ReflectionClass*)tmp0.get()->create(tmp1));
            v_p = tmp0;
          }
          if (toBoolean(t_isinterface())) {
            {
              {
                const Variant &tmp0((m_info.rvalAt(NAMSTR(s_sys_ssfb10fd8c, "parent"), AccessFlags::Error_Key)));
                lval(m_info.lvalAt(NAMSTR(s_sys_sscfb8e254, "interfaces"), AccessFlags::CheckExist_Key)).append((tmp0));
              }
            }
          }
          {
            const Variant &tmp0((v_p->t_fetch(NAMVAR(s_sys_svscfb8e254, "interfaces"))));
            m_info.setOpEqual(277, NAMSTR(s_sys_sscfb8e254, "interfaces"), (tmp0), true);
          }
          {
            const Variant &tmp0((v_p->m_info.rvalAt(NAMSTR(s_sys_ss90269404, "properties"), AccessFlags::Error_Key)));
            m_info.setOpEqual(277, NAMSTR(s_sys_ss90269404, "properties"), (tmp0), true);
          }
          {
            const Variant &tmp0((v_p->m_info.rvalAt(NAMSTR(s_sys_ss5b229ad5, "methods"), AccessFlags::Error_Key)));
            m_info.setOpEqual(277, NAMSTR(s_sys_ss5b229ad5, "methods"), (tmp0), true);
          }
          {
            const Variant &tmp0((v_p->m_info.rvalAt(NAMSTR(s_sys_ss623ae369, "constants"), AccessFlags::Error_Key)));
            m_info.setOpEqual(277, NAMSTR(s_sys_ss623ae369, "constants"), (tmp0), true);
          }
        }
      }
    }
  }
  return m_info.rvalAt(v_what, AccessFlags::Error);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 587 */
bool c_ReflectionClass::t_test(CVarRef v_what, CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::test);
  Variant v_v;

  {
    const Variant &tmp0((t_fetch(v_what)));
    v_v.assignVal(tmp0);
  }
  return (toBoolean(v_v) && isset(v_v, v_name));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 592 */
String c_ReflectionClass::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::__toString);
  return toString(null);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 611 */
Variant c_ReflectionClass::t_export(CVarRef v_name, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::export);
  p_ReflectionClass v_obj;
  String v_str;

  {
    p_ReflectionClass tmp0 = coo_ReflectionClass();
    ((c_ReflectionClass*)tmp0.get()->create(v_name));
    v_obj = tmp0;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 629 */
Variant c_ReflectionClass::t_getname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getName);
  return m_name;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 643 */
Variant c_ReflectionClass::t_isinternal() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isInternal);
  return t_fetch(NAMVAR(s_sys_svs9332a8ac, "internal"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 656 */
bool c_ReflectionClass::t_isuserdefined() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isUserDefined);
  return !(toBoolean(t_fetch(NAMVAR(s_sys_svs9332a8ac, "internal"))));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 670 */
bool c_ReflectionClass::t_isinstantiable() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isInstantiable);
  return !(toBoolean(t_fetch(NAMVAR(s_sys_svs12c8a8a6, "abstract"))));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 685 */
bool c_ReflectionClass::t_hasconstant(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::hasConstant);
  return t_test(NAMVAR(s_sys_svs623ae369, "constants"), v_name);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 699 */
bool c_ReflectionClass::t_hasmethod(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::hasMethod);
  {
    const String &tmp0((x_strtolower(toString(v_name))));
    return t_test(NAMVAR(s_sys_svs5b229ad5, "methods"), VarNR(tmp0));
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 714 */
bool c_ReflectionClass::t_hasproperty(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::hasProperty);
  return t_test(NAMVAR(s_sys_svs90269404, "properties"), v_name);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 729 */
Variant c_ReflectionClass::t_getfilename() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getFileName);
  return t_fetch(NAMVAR(s_sys_svs8ce7db5b, "file"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 743 */
Variant c_ReflectionClass::t_getstartline() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getStartLine);
  return t_fetch(NAMVAR(s_sys_svsd4c67725, "line1"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 756 */
Variant c_ReflectionClass::t_getendline() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getEndLine);
  return t_fetch(NAMVAR(s_sys_svsbefe32a8, "line2"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 770 */
Variant c_ReflectionClass::t_getdoccomment() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getDocComment);
  return t_fetch(NAMVAR(s_sys_svs9cfa17a6, "doc"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 784 */
Variant c_ReflectionClass::t_getconstructor() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getConstructor);
  Variant v_name;

  if (t_hasmethod(NAMVAR(s_sys_svsa1b87da7, "__construct"))) {
    {
      return t_getmethod(NAMVAR(s_sys_svsa1b87da7, "__construct"));
    }
  }
  {
    bool tmp0;
    {
      bool tmp1 = (!(toBoolean(t_istrait())));
      if (tmp1) {
        tmp1 = (t_hasmethod(v_name.assignVal(m_name)));
      }
      tmp0 = (tmp1);
    }
    if (tmp0) {
      {
        return t_getmethod(v_name);
      }
    }
  }
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 805 */
p_ReflectionMethod c_ReflectionClass::t_getmethod(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getMethod);
  String v_lname;
  Variant v_methods;
  Variant v_class;
  p_ReflectionMethod v_ret;

  {
    const String &tmp0((x_strtolower(toString(v_name))));
    v_lname = tmp0;
  }
  {
    const Variant &tmp0((t_fetch(NAMVAR(s_sys_svs5b229ad5, "methods"))));
    v_methods.assignVal(tmp0);
  }
  if (!(isset(v_methods, v_lname))) {
    {
      {
        const Variant &tmp0((m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key)));
        v_class.assignVal(tmp0);
      }
      {
        p_ReflectionException tmp0 = coo_ReflectionException();
        throw_exception(((c_ReflectionException*)tmp0.get()->create(concat5(NAMSTR(s_sys_ssdc6e02c2, "Method "), toString(v_class), NAMSTR(s_sys_ss819481f3, "::"), toString(v_name), NAMSTR(s_sys_ss5784ed2b, " does not exist"))), tmp0));
      }
    }
  }
  {
    const p_ReflectionMethod &tmp0((p_ReflectionMethod(((c_ReflectionMethod*)coo_ReflectionMethod())->create(null, null))));
    v_ret = tmp0;
  }
  {
    const Variant &tmp0((v_methods.rvalAt(v_lname, AccessFlags::Error)));
    v_ret->m_info.assignVal(tmp0);
  }
  v_ret->m_name = v_lname;
  {
    const Variant &tmp0((m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key)));
    v_ret->m_class.assignVal(tmp0);
  }
  if ((equal(v_lname, NAMSTR(s_sys_ssa1b87da7, "__construct")) || ((!(toBoolean(x_strcasecmp(v_lname, toString(v_ret->m_class)))) && !(t_hasmethod(NAMVAR(s_sys_svsa1b87da7, "__construct")))) && !(toBoolean(t_istrait()))))) {
    {
      v_ret->m_info.set(NAMSTR(s_sys_ssefecb9dd, "constructor"), (true_varNR), true);
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 842 */
Array c_ReflectionClass::t_getmethods(CVarRef v_filter //  = NAMVAR(s_sys_svi5830e7c6, 65535LL)
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getMethods);
  Array v_ret;
  Variant v_methods;
  Primitive v_name = 0;
  Variant v__;
  p_ReflectionMethod v_m;

  v_ret = s_sys_sa00000000;
  {
    const Variant &tmp0((t_fetch(NAMVAR(s_sys_svs5b229ad5, "methods"))));
    v_methods.assignVal(tmp0);
  }
  {
    LOOP_COUNTER(1);
    for (ArrayIter iter3 = v_methods.begin(s_class_name, true); !iter3.end(); ++iter3) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v__);
      v_name.assignVal(iter3.first());
      {
        {
          const p_ReflectionMethod &tmp0((t_getmethod(v_name)));
          v_m = tmp0;
        }
        if (((((((toBoolean(bitwise_and(v_filter, 256LL /* ReflectionMethod::IS_PUBLIC */)) && v_m->t_ispublic()) || (toBoolean(bitwise_and(v_filter, 512LL /* ReflectionMethod::IS_PROTECTED */)) && v_m->t_isprotected())) || (toBoolean(bitwise_and(v_filter, 1024LL /* ReflectionMethod::IS_PRIVATE */)) && v_m->t_isprivate())) || (toBoolean(bitwise_and(v_filter, 1LL /* ReflectionMethod::IS_STATIC */)) && toBoolean(v_m->t_isstatic()))) || (toBoolean(bitwise_and(v_filter, 4LL /* ReflectionMethod::IS_FINAL */)) && toBoolean(v_m->t_isfinal()))) || (toBoolean(bitwise_and(v_filter, 2LL /* ReflectionMethod::IS_ABSTRACT */)) && toBoolean(v_m->t_isabstract())))) {
          {
            v_ret.append((VarNR(v_m)));
          }
        }
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 871 */
p_ReflectionProperty c_ReflectionClass::t_getproperty(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getProperty);
  Variant v_properties;
  Variant v_class;
  p_ReflectionProperty v_ret;

  {
    const Variant &tmp0((t_fetch(NAMVAR(s_sys_svs90269404, "properties"))));
    v_properties.assignVal(tmp0);
  }
  if (!(isset(v_properties, v_name))) {
    {
      {
        const Variant &tmp0((m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key)));
        v_class.assignVal(tmp0);
      }
      {
        p_ReflectionException tmp0 = coo_ReflectionException();
        throw_exception(((c_ReflectionException*)tmp0.get()->create(concat5(NAMSTR(s_sys_ss9795dfc8, "Property "), toString(v_class), NAMSTR(s_sys_ss819481f3, "::"), toString(v_name), NAMSTR(s_sys_ss5784ed2b, " does not exist"))), tmp0));
      }
    }
  }
  {
    const p_ReflectionProperty &tmp0((p_ReflectionProperty(((c_ReflectionProperty*)coo_ReflectionProperty())->create(null, null))));
    v_ret = tmp0;
  }
  {
    const Variant &tmp0((v_properties.rvalAt(v_name, AccessFlags::Error)));
    v_ret->m_info.assignVal(tmp0);
  }
  v_ret->m_name.assignVal(v_name);
  {
    const Variant &tmp0((m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key)));
    v_ret->m_class.assignVal(tmp0);
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 894 */
Array c_ReflectionClass::t_getproperties(CVarRef v_filter //  = NAMVAR(s_sys_svi5830e7c6, 65535LL)
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getProperties);
  Array v_ret;
  Primitive v_name = 0;
  Variant v__;
  p_ReflectionProperty v_p;

  v_ret = s_sys_sa00000000;
  {
    LOOP_COUNTER(1);
    Variant map2 = t_fetch(NAMVAR(s_sys_svs90269404, "properties"));
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v__);
      v_name.assignVal(iter3.first());
      {
        {
          const p_ReflectionProperty &tmp0((t_getproperty(v_name)));
          v_p = tmp0;
        }
        if (((((toBoolean(bitwise_and(v_filter, 256LL /* ReflectionProperty::IS_PUBLIC */)) && v_p->t_ispublic()) || (toBoolean(bitwise_and(v_filter, 512LL /* ReflectionProperty::IS_PROTECTED */)) && v_p->t_isprotected())) || (toBoolean(bitwise_and(v_filter, 1024LL /* ReflectionProperty::IS_PRIVATE */)) && v_p->t_isprivate())) || (toBoolean(bitwise_and(v_filter, 1LL /* ReflectionProperty::IS_STATIC */)) && toBoolean(v_p->t_isstatic())))) {
          {
            v_ret.append((VarNR(v_p)));
          }
        }
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 918 */
Variant c_ReflectionClass::t_getconstants() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getConstants);
  return t_fetch(NAMVAR(s_sys_svs623ae369, "constants"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 932 */
Variant c_ReflectionClass::t_getconstant(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getConstant);
  Variant v_constants;
  Variant v_class;

  {
    const Variant &tmp0((t_fetch(NAMVAR(s_sys_svs623ae369, "constants"))));
    v_constants.assignVal(tmp0);
  }
  if (!(isset(v_constants, v_name))) {
    {
      {
        const Variant &tmp0((m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key)));
        v_class.assignVal(tmp0);
      }
      {
        p_ReflectionException tmp0 = coo_ReflectionException();
        throw_exception(((c_ReflectionException*)tmp0.get()->create(concat5(NAMSTR(s_sys_ssd816f860, "Class constant "), toString(v_class), NAMSTR(s_sys_ss819481f3, "::"), toString(v_name), NAMSTR(s_sys_ss5784ed2b, " does not exist"))), tmp0));
      }
    }
  }
  return v_constants.rvalAt(v_name, AccessFlags::Error);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 952 */
Array c_ReflectionClass::t_getinterfaces() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getInterfaces);
  Array v_ret;
  Primitive v_name = 0;
  Variant v__;
  p_ReflectionClass v_cls;

  v_ret = s_sys_sa00000000;
  {
    LOOP_COUNTER(1);
    Variant map2 = t_fetch(NAMVAR(s_sys_svscfb8e254, "interfaces"));
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v__);
      v_name.assignVal(iter3.first());
      {
        {
          p_ReflectionClass tmp0 = coo_ReflectionClass();
          ((c_ReflectionClass*)tmp0.get()->create(v_name));
          v_cls = tmp0;
        }
        if (toBoolean(v_cls->t_isinterface())) {
          {
            {
              const Variant &tmp0((v_cls->t_getname()));
              v_ret.set(tmp0, (VarNR(v_cls)));
            }
          }
        }
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 963 */
Array c_ReflectionClass::t_gettraits() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getTraits);
  Array v_ret;
  Primitive v_name = 0;
  Variant v__;
  p_ReflectionClass v_cls;

  v_ret = s_sys_sa00000000;
  {
    LOOP_COUNTER(1);
    Variant map2 = t_fetch(NAMVAR(s_sys_svs77820fcc, "traits"));
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v__);
      v_name.assignVal(iter3.first());
      {
        {
          p_ReflectionClass tmp0 = coo_ReflectionClass();
          ((c_ReflectionClass*)tmp0.get()->create(v_name));
          v_cls = tmp0;
        }
        if (toBoolean(v_cls->t_istrait())) {
          {
            {
              const Variant &tmp0((v_cls->t_getname()));
              v_ret.set(tmp0, (VarNR(v_cls)));
            }
          }
        }
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 984 */
Array c_ReflectionClass::t_getinterfacenames() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getInterfaceNames);
  Array v_ret;
  Primitive v_name = 0;
  Variant v__;
  p_ReflectionClass v_cls;

  v_ret = s_sys_sa00000000;
  {
    LOOP_COUNTER(1);
    Variant map2 = t_fetch(NAMVAR(s_sys_svscfb8e254, "interfaces"));
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v__);
      v_name.assignVal(iter3.first());
      {
        {
          p_ReflectionClass tmp0 = coo_ReflectionClass();
          ((c_ReflectionClass*)tmp0.get()->create(v_name));
          v_cls = tmp0;
        }
        if (toBoolean(v_cls->t_isinterface())) {
          {
            {
              const Variant &tmp0((v_cls->t_getname()));
              v_ret.append((tmp0));
            }
          }
        }
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 995 */
Array c_ReflectionClass::t_gettraitnames() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getTraitNames);
  Array v_ret;
  Primitive v_name = 0;
  Variant v__;
  p_ReflectionClass v_cls;

  v_ret = s_sys_sa00000000;
  {
    LOOP_COUNTER(1);
    Variant map2 = t_fetch(NAMVAR(s_sys_svs77820fcc, "traits"));
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v__);
      v_name.assignVal(iter3.first());
      {
        {
          p_ReflectionClass tmp0 = coo_ReflectionClass();
          ((c_ReflectionClass*)tmp0.get()->create(v_name));
          v_cls = tmp0;
        }
        if (toBoolean(v_cls->t_istrait())) {
          {
            {
              const Variant &tmp0((v_cls->t_getname()));
              v_ret.append((tmp0));
            }
          }
        }
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1006 */
Array c_ReflectionClass::t_gettraitaliases() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getTraitAliases);
  Array v_ret;
  Primitive v_old_name = 0;
  Variant v_new_name;

  v_ret = s_sys_sa00000000;
  {
    LOOP_COUNTER(1);
    Variant map2 = t_fetch(NAMVAR(s_sys_svsf65d4a13, "trait_aliases"));
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v_new_name);
      v_old_name.assignVal(iter3.first());
      {
        v_ret.set(v_old_name, (v_new_name));
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1024 */
Variant c_ReflectionClass::t_isinterface() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isInterface);
  return t_fetch(NAMVAR(s_sys_svs7228e959, "interface"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1036 */
Variant c_ReflectionClass::t_isabstract() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isAbstract);
  return t_fetch(NAMVAR(s_sys_svs12c8a8a6, "abstract"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1048 */
Variant c_ReflectionClass::t_isfinal() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isFinal);
  return t_fetch(NAMVAR(s_sys_svs2145036e, "final"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1052 */
Variant c_ReflectionClass::t_istrait() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isTrait);
  return t_fetch(NAMVAR(s_sys_svs22824d6b, "trait"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1065 */
Variant c_ReflectionClass::t_getmodifiers() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getModifiers);
  return t_fetch(NAMVAR(s_sys_svs9f244c80, "modifiers"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1079 */
bool c_ReflectionClass::t_isinstance(CVarRef v_obj) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isInstance);
  return x_hphp_instanceof(toObject(v_obj), toString(m_name));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1092 */
Object c_ReflectionClass::t_newinstance(int num_args, Array args /* = Array() */) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::newInstance);
  Array v_args;

  {
    const Array &tmp0(((args.isNull() ? Array::Create() : args)));
    v_args = tmp0;
  }
  return x_hphp_create_object(toString(m_name), v_args);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1111 */
Object c_ReflectionClass::t_newinstanceargs(CVarRef v_args) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::newInstanceArgs);
  {
    const String &tmp0((toString(m_name)));
    const Array &tmp1((toArray(x_array_values(v_args))));
    return x_hphp_create_object(tmp0, tmp1);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1125 */
Variant c_ReflectionClass::t_getparentclass() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getParentClass);
  Variant v_parent;

  {
    const Variant &tmp0((t_fetch(NAMVAR(s_sys_svsfb10fd8c, "parent"))));
    v_parent.assignVal(tmp0);
  }
  if (empty(v_parent)) {
    {
      return false;
    }
  }
  {
    p_ReflectionClass tmp0 = coo_ReflectionClass();
    return ((c_ReflectionClass*)tmp0.get()->create(v_parent), tmp0);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1144 */
Variant c_ReflectionClass::t_issubclassof(Variant v_cls) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isSubclassOf);
  Primitive v_name = 0;
  Variant v__;
  Variant v_parent;

  if (instanceOf(v_cls, NAMSTR(s_sys_ssfc63c2bb, "ReflectionClass"))) {
    {
      {
        const Variant &tmp0((v_cls.o_getPublic(NAMSTR(s_sys_ssdc3cbddc, "name"), true)));
        v_cls.assignVal(tmp0);
      }
    }
  }
  {
    LOOP_COUNTER(1);
    Variant map2 = t_fetch(NAMVAR(s_sys_svscfb8e254, "interfaces"));
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v__);
      v_name.assignVal(iter3.first());
      {
        {
          bool tmp0;
          {
            int tmp1((x_strcasecmp(toString(v_cls), toString(v_name))));
            tmp0 = (equal(tmp1, 0LL));
          }
          if (tmp0) {
            {
              return true;
            }
          }
        }
      }
    }
  }
  {
    const Variant &tmp0((t_fetch(NAMVAR(s_sys_svsfb10fd8c, "parent"))));
    v_parent.assignVal(tmp0);
  }
  if (empty(v_parent)) {
    {
      return false;
    }
  }
  {
    bool tmp0;
    {
      int tmp1((x_strcasecmp(toString(v_cls), toString(v_parent))));
      tmp0 = (equal(tmp1, 0LL));
    }
    if (tmp0) {
      {
        return true;
      }
    }
  }
  {
    MethodCallPackage mcp0;
    CVarRef obj0 = t_getparentclass();
    mcp0.methodCall((obj0), NAMSTR(s_sys_ssdd355b2b, "isSubclassOf"), 0x373333991926C97ELL);
    const CallInfo *cit0 ATTRIBUTE_UNUSED = mcp0.ci;
    return wrap_variant((mcp0.bindClass(fi)->getMeth1Args())(mcp0, 1, v_cls));
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1173 */
Array c_ReflectionClass::t_getstaticproperties() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getStaticProperties);
  Array v_ret;
  Variant v_prop;

  v_ret = s_sys_sa00000000;
  {
    LOOP_COUNTER(1);
    Variant map2 = t_getproperties();
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v_prop);
      {
        {
          bool tmp0;
          {
            MethodCallPackage mcp1;
            CVarRef obj1 = v_prop;
            mcp1.methodCall((obj1), NAMSTR(s_sys_ss404bf1b4, "isStatic"), 0x7A15DC56E8CC0B19LL);
            const CallInfo *cit1 ATTRIBUTE_UNUSED = mcp1.ci;
            tmp0 = (toBoolean((mcp1.bindClass(fi)->getMeth0Args())(mcp1, 0)));
          }
          if (tmp0) {
            {
              {
                const Variant &tmp0((v_prop.o_getPublic(NAMSTR(s_sys_ssdc3cbddc, "name"), true)));
                v_ret.set(tmp0, (v_prop));
              }
            }
          }
        }
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1194 */
Variant c_ReflectionClass::t_getstaticpropertyvalue(CVarRef v_name, CVarRef v_default //  = null_variant
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getStaticPropertyValue);
  {
    bool tmp0;
    {
      MethodCallPackage mcp1;
      mcp1.methodCall((GET_THIS_VALID()), NAMSTR(s_sys_ssf3f5d744, "hasProperty"), 0x40C7B30DCB439C8FLL);
      const CallInfo *cit1 ATTRIBUTE_UNUSED = mcp1.ci;
      bool tmp2 = (toBoolean((mcp1.bindClass(fi)->getMeth1Args())(mcp1, 1, v_name)));
      if (tmp2) {
        const p_ReflectionProperty &tmp3((t_getproperty(v_name)));
        tmp2 = (toBoolean(tmp3->t_isstatic()));
      }
      tmp0 = (tmp2);
    }
    if (tmp0) {
      {
        return x_hphp_get_static_property(toString(m_name), toString(v_name));
      }
    }
  }
  return v_default;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1215 */
void c_ReflectionClass::t_setstaticpropertyvalue(CVarRef v_name, CVarRef v_value) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::setStaticPropertyValue);
  x_hphp_set_static_property(toString(m_name), toString(v_name), v_value);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1229 */
Array c_ReflectionClass::t_getdefaultproperties() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getDefaultProperties);
  Array v_ret;
  Variant v_prop;

  v_ret = s_sys_sa00000000;
  {
    LOOP_COUNTER(1);
    Variant map2 = t_getproperties();
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v_prop);
      {
        {
          bool tmp0;
          {
            MethodCallPackage mcp1;
            CVarRef obj1 = v_prop;
            mcp1.methodCall((obj1), NAMSTR(s_sys_ss9dad4367, "isDefault"), 0x384A52597AB11F15LL);
            const CallInfo *cit1 ATTRIBUTE_UNUSED = mcp1.ci;
            tmp0 = (toBoolean((mcp1.bindClass(fi)->getMeth0Args())(mcp1, 0)));
          }
          if (tmp0) {
            {
              {
                const Variant &tmp0((v_prop.o_getPublic(NAMSTR(s_sys_ssdc3cbddc, "name"), true)));
                v_ret.set(tmp0, (v_prop));
              }
            }
          }
        }
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1248 */
Variant c_ReflectionClass::t_isiterateable() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isIterateable);
  return t_issubclassof(NAMSTR(s_sys_ss92306c9b, "ArrayAccess"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1263 */
bool c_ReflectionClass::t_implementsinterface(Variant v_cls) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::implementsInterface);
  Primitive v_name = 0;
  Variant v__;

  if (instanceOf(v_cls, NAMSTR(s_sys_ssfc63c2bb, "ReflectionClass"))) {
    {
      {
        const Variant &tmp0((v_cls.o_getPublic(NAMSTR(s_sys_ssdc3cbddc, "name"), true)));
        v_cls.assignVal(tmp0);
      }
    }
  }
  if (!(x_interface_exists(toString(v_cls)))) {
    {
      {
        p_ReflectionException tmp0 = coo_ReflectionException();
        throw_exception(((c_ReflectionException*)tmp0.get()->create(concat(toString(v_cls), NAMSTR(s_sys_ssda497f2a, " is not an Interface"))), tmp0));
      }
    }
  }
  {
    LOOP_COUNTER(1);
    Variant map2 = t_fetch(NAMVAR(s_sys_svscfb8e254, "interfaces"));
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v__);
      v_name.assignVal(iter3.first());
      {
        {
          bool tmp0;
          {
            int tmp1((x_strcasecmp(toString(v_cls), toString(v_name))));
            tmp0 = (equal(tmp1, 0LL));
          }
          if (tmp0) {
            {
              return true;
            }
          }
        }
      }
    }
  }
  return false;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1288 */
Variant c_ReflectionClass::t_getextension() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getExtension);
  return t_fetch(NAMVAR(s_sys_svse9bf4500, "extension"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1302 */
Variant c_ReflectionClass::t_getextensionname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getExtensionName);
  {
    MethodCallPackage mcp0;
    CVarRef obj0 = t_fetch(NAMVAR(s_sys_svse9bf4500, "extension"));
    mcp0.methodCall((obj0), NAMSTR(s_sys_ssc2df217e, "getName"), 0x23F51CDECC198965LL);
    const CallInfo *cit0 ATTRIBUTE_UNUSED = mcp0.ci;
    return wrap_variant((mcp0.bindClass(fi)->getMeth0Args())(mcp0, 0));
  }
}
namespace hphp_impl_splitter {}
ObjectData *coo_ReflectionParameter() {
  return NEWOBJ(c_ReflectionParameter)();
}
ObjectData *coo_ReflectionMethod() {
  return NEWOBJ(c_ReflectionMethod)();
}
ObjectData *coo_ReflectionExtension() {
  return NEWOBJ(c_ReflectionExtension)();
}
ObjectData *coo_ReflectionFunction() {
  return NEWOBJ(c_ReflectionFunction)();
}
ObjectData *coo_ReflectionProperty() {
  return NEWOBJ(c_ReflectionProperty)();
}
ObjectData *coo_ReflectionFunctionAbstract() {
  return NEWOBJ(c_ReflectionFunctionAbstract)();
}
ObjectData *coo_ReflectionException() {
  return NEWOBJ(c_ReflectionException)();
}
ObjectData *coo_ReflectionObject() {
  return NEWOBJ(c_ReflectionObject)();
}
ObjectData *coo_ReflectionClass() {
  return NEWOBJ(c_ReflectionClass)();
}

// Class tables
static const int64 cpt_static_inits[] = {
  (int64)&NAMVAR(s_sys_svi86af027e, 16LL),
  (int64)&NAMVAR(s_sys_svif2a1fb10, 32LL),
  (int64)&NAMVAR(s_sys_svi1abc09e0, 64LL),
  (int64)&null_variant,
  (int64)&NAMVAR(s_sys_svibf7d1df5, 262144LL),
  (int64)&NAMVAR(s_sys_svib794f8ce, 1LL),
  (int64)&NAMVAR(s_sys_svi543f7d14, 1024LL),
  (int64)&NAMVAR(s_sys_svi6af020b2, 256LL),
  (int64)&NAMVAR(s_sys_svi90d5f98c, 2LL),
  (int64)&NAMVAR(s_sys_svi5e544a31, 4LL),
  (int64)&NAMVAR(s_sys_svid5e04164, 512LL),
};
static const ClassPropTableEntry cpt_table_entries[] = {
  {0x042E299D3BE2773ALL,1,0,0,100,4,0,&NAMSTR(s_sys_ss3be2773a, "IS_IMPLICIT_ABSTRACT") },
  {0x468EF528A19B529ELL,1,1,0,36,4,0,&NAMSTR(s_sys_ssa19b529e, "IS_EXPLICIT_ABSTRACT") },
  {0x47AAFAC74A58AD66LL,0,2,0,100,4,0,&NAMSTR(s_sys_ss4a58ad66, "IS_FINAL") },

  {0x5655B4FF77E35232LL,1,3,0,68,10,GET_PROPERTY_OFFSET(c_ReflectionClass, m_name),&NAMSTR(s_sys_ssdc3cbddc, "name") },
  {0x0F2EF58F157D479FLL,0,3,17,65,10,GET_PROPERTY_OFFSET(c_ReflectionClass, m_info),&NAMSTR(s_sys_ss84e1d89d, "\000ReflectionClass\000info") },

  {0x5655B4FF77E35232LL,1,3,21,65,10,GET_PROPERTY_OFFSET(c_ReflectionExtension, m_name),&NAMSTR(s_sys_ss8bbc8ede, "\000ReflectionExtension\000name") },
  {0x0F2EF58F157D479FLL,0,3,21,65,10,GET_PROPERTY_OFFSET(c_ReflectionExtension, m_info),&NAMSTR(s_sys_ss5596f6c8, "\000ReflectionExtension\000info") },

  {0x25C5A7C72E7B0EF6LL,0,4,0,100,4,0,&NAMSTR(s_sys_ss2e7b0ef6, "IS_DEPRECATED") },

  {0x0F2EF58F157D479FLL,0,3,0,66,10,GET_PROPERTY_OFFSET(c_ReflectionFunctionAbstract, m_info),&NAMSTR(s_sys_ss33988b3e, "info") },

  {0x7DA78A433EE05120LL,2,5,0,100,4,0,&NAMSTR(s_sys_ss3ee05120, "IS_STATIC") },
  {0x163BE642CB04C741LL,2,6,0,100,4,0,&NAMSTR(s_sys_sscb04c741, "IS_PRIVATE") },
  {0x3784532769C1EF03LL,3,7,0,36,4,0,&NAMSTR(s_sys_ss69c1ef03, "IS_PUBLIC") },
  {0x6572B785E302A373LL,1,8,0,100,4,0,&NAMSTR(s_sys_sse302a373, "IS_ABSTRACT") },
  {0x47AAFAC74A58AD66LL,0,9,0,100,4,0,&NAMSTR(s_sys_ss4a58ad66, "IS_FINAL") },
  {0x10A614A8C272DC9ELL,-4,10,0,100,4,0,&NAMSTR(s_sys_ssc272dc9e, "IS_PROTECTED") },

  {0x2E3A246D1F74C210LL,0,3,0,68,10,GET_PROPERTY_OFFSET(c_ReflectionMethod, m_class),&NAMSTR(s_sys_ssc82dbd12, "class") },
  {0x5655B4FF77E35232LL,-1,3,0,68,10,GET_PROPERTY_OFFSET(c_ReflectionMethod, m_name),&NAMSTR(s_sys_ssdc3cbddc, "name") },

  {0x245E74B9CC12BFC3LL,0,3,0,68,10,GET_PROPERTY_OFFSET(c_ReflectionObject, m_obj),&NAMSTR(s_sys_ss0f61bd03, "obj") },

  {0x0F2EF58F157D479FLL,0,3,0,68,10,GET_PROPERTY_OFFSET(c_ReflectionParameter, m_info),&NAMSTR(s_sys_ss33988b3e, "info") },

  {0x7DA78A433EE05120LL,2,5,0,100,4,0,&NAMSTR(s_sys_ss3ee05120, "IS_STATIC") },
  {0x163BE642CB04C741LL,0,6,0,100,4,0,&NAMSTR(s_sys_sscb04c741, "IS_PRIVATE") },
  {0x3784532769C1EF03LL,1,7,0,100,4,0,&NAMSTR(s_sys_ss69c1ef03, "IS_PUBLIC") },
  {0x10A614A8C272DC9ELL,-2,10,0,100,4,0,&NAMSTR(s_sys_ssc272dc9e, "IS_PROTECTED") },

  {0x2E3A246D1F74C210LL,0,3,0,68,10,GET_PROPERTY_OFFSET(c_ReflectionProperty, m_class),&NAMSTR(s_sys_ssc82dbd12, "class") },
  {0x5655B4FF77E35232LL,-1,3,0,68,10,GET_PROPERTY_OFFSET(c_ReflectionProperty, m_name),&NAMSTR(s_sys_ssdc3cbddc, "name") },
  {0x0F2EF58F157D479FLL,-1,3,0,68,10,GET_PROPERTY_OFFSET(c_ReflectionProperty, m_info),&NAMSTR(s_sys_ss33988b3e, "info") },

};
static const int cpt_hash_entries[] = {
  // ReflectionClass hash
  -1,1,-1,-1,-1,0,-1,-1,
  -1,-1,3,-1,-1,-1,-1,4,
  // ReflectionClass lists
  4,-1,
  -1,
  -1,
  // ReflectionExtension hash
  -1,-1,0,-1,-1,-1,-1,1,
  // ReflectionExtension lists
  0,1,-1,
  -1,
  -1,
  // ReflectionFunction hash
  -1,0,-1,-1,-1,-1,-1,-1,
  // ReflectionFunction lists
  -1,
  -1,
  -1,
  // ReflectionFunctionAbstract hash
  -1,-1,-1,-1,-1,-1,-1,0,
  // ReflectionFunctionAbstract lists
  -1,
  -1,
  -1,
  // ReflectionMethod hash
  -1,5,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,2,-1,1,0,
  6,-1,7,-1,-1,-1,-1,-1,
  // ReflectionMethod lists
  -1,
  -1,
  -1,
  // ReflectionObject hash
  -1,-1,-1,0,-1,-1,-1,-1,
  // ReflectionObject lists
  -1,
  -1,
  -1,
  // ReflectionParameter hash
  -1,-1,-1,-1,-1,-1,-1,0,
  // ReflectionParameter lists
  -1,
  -1,
  -1,
  // ReflectionProperty hash
  -1,3,-1,-1,2,-1,1,0,
  4,-1,5,-1,-1,-1,-1,6,
  // ReflectionProperty lists
  -1,
  -1,
  -1,
};
const ClassPropTable c_ReflectionClass::os_prop_table = {
  7,3,-1,-1,7,0,10,0,
  cpt_hash_entries+8,0,cpt_table_entries+0,cpt_static_inits
};
const ClassPropTable c_ReflectionExtension::os_prop_table = {
  7,0,-1,-1,-1,-1,11,0,
  cpt_hash_entries+20,0,cpt_table_entries+5,cpt_static_inits
};
const ClassPropTable c_ReflectionFunction::os_prop_table = {
  -1,-1,-1,-1,7,0,1,0,
  cpt_hash_entries+41,&c_ReflectionFunctionAbstract::os_prop_table,cpt_table_entries+7,cpt_static_inits
};
const ClassPropTable c_ReflectionFunctionAbstract::os_prop_table = {
  7,0,-1,-1,-1,-1,9,0,
  cpt_hash_entries+44,0,cpt_table_entries+8,cpt_static_inits
};
const ClassPropTable c_ReflectionMethod::os_prop_table = {
  7,7,-1,-1,15,0,9,0,
  cpt_hash_entries+71,&c_ReflectionFunctionAbstract::os_prop_table,cpt_table_entries+9,cpt_static_inits
};
const ClassPropTable c_ReflectionObject::os_prop_table = {
  7,0,-1,-1,-1,-1,9,0,
  cpt_hash_entries+82,&c_ReflectionClass::os_prop_table,cpt_table_entries+17,cpt_static_inits
};
const ClassPropTable c_ReflectionParameter::os_prop_table = {
  7,0,-1,-1,-1,-1,9,0,
  cpt_hash_entries+93,0,cpt_table_entries+18,cpt_static_inits
};
const ClassPropTable c_ReflectionProperty::os_prop_table = {
  7,6,-1,-1,7,0,9,0,
  cpt_hash_entries+112,0,cpt_table_entries+19,cpt_static_inits
};

///////////////////////////////////////////////////////////////////////////////
}
